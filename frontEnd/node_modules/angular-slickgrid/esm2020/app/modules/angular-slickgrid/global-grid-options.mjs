import { DelimiterType, EventNamingStyle, FileType, Filters, OperatorType } from '@slickgrid-universal/common';
/** Global Grid Options Defaults */
export const GlobalGridOptions = {
    alwaysShowVerticalScroll: true,
    autoEdit: false,
    asyncEditorLoading: false,
    autoFitColumnsOnFirstLoad: true,
    autoResize: {
        applyResizeToContainer: true,
        calculateAvailableSizeBy: 'window',
        bottomPadding: 20,
        minHeight: 180,
        minWidth: 300,
        rightPadding: 0
    },
    cellHighlightCssClass: 'slick-cell-modified',
    checkboxSelector: {
        cssClass: 'slick-cell-checkboxsel'
    },
    columnPicker: {
        fadeSpeed: 0,
        hideForceFitButton: false,
        hideSyncResizeButton: true,
        headerColumnValueExtractor: pickerHeaderColumnValueExtractor
    },
    cellMenu: {
        autoAdjustDrop: true,
        autoAlignSide: true,
        hideCloseButton: true,
        hideCommandSection: false,
        hideOptionSection: false,
    },
    contextMenu: {
        autoAdjustDrop: true,
        autoAlignSide: true,
        hideCloseButton: true,
        hideClearAllGrouping: false,
        hideCollapseAllGroups: false,
        hideCommandSection: false,
        hideCopyCellValueCommand: false,
        hideExpandAllGroups: false,
        hideExportCsvCommand: false,
        hideExportExcelCommand: false,
        hideExportTextDelimitedCommand: true,
        hideMenuOnScroll: true,
        hideOptionSection: false,
        iconCopyCellValueCommand: 'fa fa-clone',
        iconExportCsvCommand: 'fa fa-download',
        iconExportExcelCommand: 'fa fa-file-excel-o text-success',
        iconExportTextDelimitedCommand: 'fa fa-download',
    },
    customFooterOptions: {
        dateFormat: 'YYYY-MM-DD, hh:mm a',
        hideRowSelectionCount: false,
        hideTotalItemCount: false,
        hideLastUpdateTimestamp: true,
        footerHeight: 25,
        leftContainerClass: 'col-xs-12 col-sm-5',
        rightContainerClass: 'col-xs-6 col-sm-7',
        metricSeparator: '|',
        metricTexts: {
            items: 'items',
            itemsKey: 'ITEMS',
            itemsSelected: 'items selected',
            itemsSelectedKey: 'ITEMS_SELECTED',
            of: 'of',
            ofKey: 'OF',
        }
    },
    dataView: {
        // when enabled, this will preserve the row selection even after filtering/sorting/grouping
        syncGridSelection: {
            preserveHidden: false,
            preserveHiddenOnSelectionChange: true
        },
        syncGridSelectionWithBackendService: false, // but disable it when using backend services
    },
    datasetIdPropertyName: 'id',
    defaultFilter: Filters.input,
    defaultBackendServiceFilterTypingDebounce: 500,
    defaultColumnSortFieldId: 'id',
    defaultFilterPlaceholder: 'üîéÔ∏é',
    defaultFilterRangeOperator: OperatorType.rangeInclusive,
    editable: false,
    enableAutoResize: true,
    enableAutoSizeColumns: true,
    enableCellNavigation: false,
    enableColumnPicker: true,
    enableColumnReorder: true,
    enableColumnResizeOnDoubleClick: true,
    enableContextMenu: true,
    enableExcelExport: true,
    enableTextExport: false,
    enableFilterTrimWhiteSpace: false,
    enableGridMenu: true,
    enableHeaderMenu: true,
    enableEmptyDataWarningMessage: true,
    emptyDataWarning: {
        className: 'slick-empty-data-warning',
        message: 'No data to display.',
        messageKey: 'EMPTY_DATA_WARNING_MESSAGE',
        hideFrozenLeftWarning: false,
        hideFrozenRightWarning: false,
        leftViewportMarginLeft: '40%',
        rightViewportMarginLeft: '40%',
        frozenLeftViewportMarginLeft: '0px',
        frozenRightViewportMarginLeft: '40%',
    },
    enableMouseHoverHighlightRow: true,
    enableSorting: true,
    enableTextSelectionOnCells: true,
    eventNamingStyle: EventNamingStyle.camelCase,
    explicitInitialization: true,
    excelExportOptions: {
        addGroupIndentation: true,
        exportWithFormatter: false,
        filename: 'export',
        format: FileType.xlsx,
        groupingColumnHeaderTitle: 'Group By',
        groupCollapsedSymbol: '‚Æû',
        groupExpandedSymbol: '‚Æü',
        groupingAggregatorRowText: '',
        sanitizeDataExport: false,
    },
    textExportOptions: {
        delimiter: DelimiterType.comma,
        exportWithFormatter: false,
        filename: 'export',
        format: FileType.csv,
        groupingColumnHeaderTitle: 'Group By',
        groupingAggregatorRowText: '',
        sanitizeDataExport: false,
        useUtf8WithBom: true
    },
    filterTypingDebounce: 0,
    forceFitColumns: false,
    frozenHeaderWidthCalcDifferential: 0,
    gridMenu: {
        dropSide: 'left',
        commandLabels: {
            clearAllFiltersCommandKey: 'CLEAR_ALL_FILTERS',
            clearAllSortingCommandKey: 'CLEAR_ALL_SORTING',
            clearFrozenColumnsCommandKey: 'CLEAR_PINNING',
            exportCsvCommandKey: 'EXPORT_TO_CSV',
            exportExcelCommandKey: 'EXPORT_TO_EXCEL',
            exportTextDelimitedCommandKey: 'EXPORT_TO_TAB_DELIMITED',
            refreshDatasetCommandKey: 'REFRESH_DATASET',
            toggleFilterCommandKey: 'TOGGLE_FILTER_ROW',
            togglePreHeaderCommandKey: 'TOGGLE_PRE_HEADER_ROW',
        },
        hideClearAllFiltersCommand: false,
        hideClearAllSortingCommand: false,
        hideClearFrozenColumnsCommand: true,
        hideExportCsvCommand: false,
        hideExportExcelCommand: false,
        hideExportTextDelimitedCommand: true,
        hideForceFitButton: false,
        hideRefreshDatasetCommand: false,
        hideSyncResizeButton: true,
        hideToggleFilterCommand: false,
        hideTogglePreHeaderCommand: false,
        iconCssClass: 'fa fa-bars',
        iconClearAllFiltersCommand: 'fa fa-filter text-danger',
        iconClearAllSortingCommand: 'fa fa-unsorted text-danger',
        iconClearFrozenColumnsCommand: 'fa fa-times',
        iconExportCsvCommand: 'fa fa-download',
        iconExportExcelCommand: 'fa fa-file-excel-o text-success',
        iconExportTextDelimitedCommand: 'fa fa-download',
        iconRefreshDatasetCommand: 'fa fa-refresh',
        iconToggleFilterCommand: 'fa fa-random',
        iconTogglePreHeaderCommand: 'fa fa-random',
        menuWidth: 16,
        resizeOnShowHeaderRow: true,
        headerColumnValueExtractor: pickerHeaderColumnValueExtractor
    },
    headerMenu: {
        autoAlign: true,
        autoAlignOffset: 12,
        minWidth: 140,
        iconClearFilterCommand: 'fa fa-filter text-danger',
        iconClearSortCommand: 'fa fa-unsorted',
        iconFreezeColumns: 'fa fa-thumb-tack',
        iconSortAscCommand: 'fa fa-sort-amount-asc',
        iconSortDescCommand: 'fa fa-sort-amount-desc',
        iconColumnHideCommand: 'fa fa-times',
        iconColumnResizeByContentCommand: 'fa fa-arrows-h',
        hideColumnResizeByContentCommand: false,
        hideColumnHideCommand: false,
        hideClearFilterCommand: false,
        hideClearSortCommand: false,
        hideFreezeColumnsCommand: true,
        hideSortCommands: false
    },
    headerRowHeight: 35,
    multiColumnSort: true,
    numberedMultiColumnSort: true,
    tristateMultiColumnSort: false,
    sortColNumberInSeparateSpan: true,
    suppressActiveCellChangeOnEdit: false,
    pagination: {
        pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],
        pageSize: 25,
        totalItems: 0
    },
    // technically speaking the Row Detail requires the process & viewComponent but we'll ignore it just to set certain options
    rowDetailView: {
        collapseAllOnSort: true,
        cssClass: 'detail-view-toggle',
        panelRows: 1,
        keyPrefix: '__',
        useRowClick: false,
        useSimpleViewportCalc: true,
        saveDetailViewOnScroll: false,
    },
    rowHeight: 35,
    topPanelHeight: 35,
    translationNamespaceSeparator: ':',
    resetFilterSearchValueAfterOnBeforeCancellation: true,
    resizeByContentOnlyOnFirstLoad: true,
    resizeByContentOptions: {
        alwaysRecalculateColumnWidth: false,
        cellCharWidthInPx: 7.8,
        cellPaddingWidthInPx: 14,
        defaultRatioForStringType: 0.88,
        formatterPaddingWidthInPx: 0,
        maxItemToInspectCellContentWidth: 1000,
        maxItemToInspectSingleColumnWidthByContent: 5000,
        widthToRemoveFromExceededWidthReadjustment: 50,
    },
    treeDataOptions: {
        exportIndentMarginLeft: 5,
        exportIndentationLeadingChar: 'ÕèÕèÕèÕèÕèÕèÕèÕèÕè¬∑',
    }
};
/**
 * Value Extractor for both ColumnPicker & GridMenu Picker
 * when using Column Header Grouping, we'll prefix the column group title
 * else we'll simply return the column name title
 */
function pickerHeaderColumnValueExtractor(column) {
    const headerGroup = column && column.columnGroup || '';
    if (headerGroup) {
        return headerGroup + ' - ' + column.name;
    }
    return column && column.name || '';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsLWdyaWQtb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9nbG9iYWwtZ3JpZC1vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBVSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQWtCLE1BQU0sNkJBQTZCLENBQUM7QUFHdkksbUNBQW1DO0FBQ25DLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUF3QjtJQUNwRCx3QkFBd0IsRUFBRSxJQUFJO0lBQzlCLFFBQVEsRUFBRSxLQUFLO0lBQ2Ysa0JBQWtCLEVBQUUsS0FBSztJQUN6Qix5QkFBeUIsRUFBRSxJQUFJO0lBQy9CLFVBQVUsRUFBRTtRQUNWLHNCQUFzQixFQUFFLElBQUk7UUFDNUIsd0JBQXdCLEVBQUUsUUFBUTtRQUNsQyxhQUFhLEVBQUUsRUFBRTtRQUNqQixTQUFTLEVBQUUsR0FBRztRQUNkLFFBQVEsRUFBRSxHQUFHO1FBQ2IsWUFBWSxFQUFFLENBQUM7S0FDaEI7SUFDRCxxQkFBcUIsRUFBRSxxQkFBcUI7SUFDNUMsZ0JBQWdCLEVBQUU7UUFDaEIsUUFBUSxFQUFFLHdCQUF3QjtLQUNuQztJQUNELFlBQVksRUFBRTtRQUNaLFNBQVMsRUFBRSxDQUFDO1FBQ1osa0JBQWtCLEVBQUUsS0FBSztRQUN6QixvQkFBb0IsRUFBRSxJQUFJO1FBQzFCLDBCQUEwQixFQUFFLGdDQUFnQztLQUM3RDtJQUNELFFBQVEsRUFBRTtRQUNSLGNBQWMsRUFBRSxJQUFJO1FBQ3BCLGFBQWEsRUFBRSxJQUFJO1FBQ25CLGVBQWUsRUFBRSxJQUFJO1FBQ3JCLGtCQUFrQixFQUFFLEtBQUs7UUFDekIsaUJBQWlCLEVBQUUsS0FBSztLQUN6QjtJQUNELFdBQVcsRUFBRTtRQUNYLGNBQWMsRUFBRSxJQUFJO1FBQ3BCLGFBQWEsRUFB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Q0QsT0FBTyxNQUFNLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7QUFDckMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbHVtbiwgRGVsaW1pdGVyVHlwZSwgRXZlbnROYW1pbmdTdHlsZSwgRmlsZVR5cGUsIEZpbHRlcnMsIE9wZXJhdG9yVHlwZSwgVHJlZURhdGFPcHRpb24gfSBmcm9tICdAc2xpY2tncmlkLXVuaXZlcnNhbC9jb21tb24nO1xuaW1wb3J0IHsgR3JpZE9wdGlvbiwgUm93RGV0YWlsVmlldyB9IGZyb20gJy4vbW9kZWxzL2luZGV4JztcblxuLyoqIEdsb2JhbCBHcmlkIE9wdGlvbnMgRGVmYXVsdHMgKi9cbmV4cG9ydCBjb25zdCBHbG9iYWxHcmlkT3B0aW9uczogUGFydGlhbDxHcmlkT3B0aW9uPiA9IHtcbiAgYWx3YXlzU2hvd1ZlcnRpY2FsU2Nyb2xsOiB0cnVlLFxuICBhdXRvRWRpdDogZmFsc2UsXG4gIGFzeW5jRWRpdG9yTG9hZGluZzogZmFsc2UsXG4gIGF1dG9GaXRDb2x1bW5zT25GaXJzdExvYWQ6IHRydWUsXG4gIGF1dG9SZXNpemU6IHtcbiAgICBhcHBseVJlc2l6ZVRvQ29udGFpbmVyOiB0cnVlLFxuICAgIGNhbGN1bGF0ZUF2YWlsYWJsZVNpemVCeTogJ3dpbmRvdycsXG4gICAgYm90dG9tUGFkZGluZzogMjAsXG4gICAgbWluSGVpZ2h0OiAxODAsXG4gICAgbWluV2lkdGg6IDMwMCxcbiAgICByaWdodFBhZGRpbmc6IDBcbiAgfSxcbiAgY2VsbEhpZ2hsaWdodENzc0NsYXNzOiAnc2xpY2stY2VsbC1tb2RpZmllZCcsXG4gIGNoZWNrYm94U2VsZWN0b3I6IHtcbiAgICBjc3NDbGFzczogJ3NsaWNrLWNlbGwtY2hlY2tib3hzZWwnXG4gIH0sXG4gIGNvbHVtblBpY2tlcjoge1xuICAgIGZhZGVTcGVlZDogMCxcbiAgICBoaWRlRm9yY2VGaXRCdXR0b246IGZhbHNlLFxuICAgIGhpZGVTeW5jUmVzaXplQnV0dG9uOiB0cnVlLFxuICAgIGhlYWRlckNvbHVtblZhbHVlRXh0cmFjdG9yOiBwaWNrZXJIZWFkZXJDb2x1bW5WYWx1ZUV4dHJhY3RvclxuICB9LFxuICBjZWxsTWVudToge1xuICAgIGF1dG9BZGp1c3REcm9wOiB0cnVlLFxuICAgIGF1dG9BbGlnblNpZGU6IHRydWUsXG4gICAgaGlkZUNsb3NlQnV0dG9uOiB0cnVlLFxuICAgIGhpZGVDb21tYW5kU2VjdGlvbjogZmFsc2UsXG4gICAgaGlkZU9wdGlvblNlY3Rpb246IGZhbHNlLFxuICB9LFxuICBjb250ZXh0TWVudToge1xuICAgIGF1dG9BZGp1c3REcm9wOiB0cnVlLFxuICAgIGF1dG9BbGlnblNpZGU6IHRydWUsXG4gICAgaGlkZUNsb3NlQnV0dG9uOiB0cnVlLFxuICAgIGhpZGVDbGVhckFsbEdyb3VwaW5nOiBmYWxzZSxcbiAgICBoaWRlQ29sbGFwc2VBbGxHcm91cHM6IGZhbHNlLFxuICAgIGhpZGVDb21tYW5kU2VjdGlvbjogZmFsc2UsXG4gICAgaGlkZUNvcHlDZWxsVmFsdWVDb21tYW5kOiBmYWxzZSxcbiAgICBoaWRlRXhwYW5kQWxsR3JvdXBzOiBmYWxzZSxcbiAgICBoaWRlRXhwb3J0Q3N2Q29tbWFuZDogZmFsc2UsXG4gICAgaGlkZUV4cG9ydEV4Y2VsQ29tbWFuZDogZmFsc2UsXG4gICAgaGlkZUV4cG9ydFRleHREZWxpbWl0ZWRDb21tYW5kOiB0cnVlLFxuICAgIGhpZGVNZW51T25TY3JvbGw6IHRydWUsXG4gICAgaGlkZU9wdGlvblNlY3Rpb246IGZhbHNlLFxuICAgIGljb25Db3B5Q2VsbFZhbHVlQ29tbWFuZDogJ2ZhIGZhLWNsb25lJyxcbiAgICBpY29uRXhwb3J0Q3N2Q29tbWFuZDogJ2ZhIGZhLWRvd25sb2FkJyxcbiAgICBpY29uRXhwb3J0RXhjZWxDb21tYW5kOiAnZmEgZmEtZmlsZS1leGNlbC1vIHRleHQtc3VjY2VzcycsXG4gICAgaWNvbkV4cG9ydFRleHREZWxpbWl0ZWRDb21tYW5kOiAnZmEgZmEtZG93bmxvYWQnLFxuICB9LFxuICBjdXN0b21Gb290ZXJPcHRpb25zOiB7XG4gICAgZGF0ZUZvcm1hdDogJ1lZWVktTU0tREQsIGhoOm1tIGEnLFxuICAgIGhpZGVSb3dTZWxlY3Rpb25Db3VudDogZmFsc2UsXG4gICAgaGlkZVRvdGFsSXRlbUNvdW50OiBmYWxzZSxcbiAgICBoaWRlTGFzdFVwZGF0ZVRpbWVzdGFtcDogdHJ1ZSxcbiAgICBmb290ZXJIZWlnaHQ6IDI1LFxuICAgIGxlZnRDb250YWluZXJDbGFzczogJ2NvbC14cy0xMiBjb2wtc20tNScsXG4gICAgcmlnaHRDb250YWluZXJDbGFzczogJ2NvbC14cy02IGNvbC1zbS03JyxcbiAgICBtZXRyaWNTZXBhcmF0b3I6ICd8JyxcbiAgICBtZXRyaWNUZXh0czoge1xuICAgICAgaXRlbXM6ICdpdGVtcycsXG4gICAgICBpdGVtc0tleTogJ0lURU1TJyxcbiAgICAgIGl0ZW1zU2VsZWN0ZWQ6ICdpdGVtcyBzZWxlY3RlZCcsXG4gICAgICBpdGVtc1NlbGVjdGVkS2V5OiAnSVRFTVNfU0VMRUNURUQnLFxuICAgICAgb2Y6ICdvZicsXG4gICAgICBvZktleTogJ09GJyxcbiAgICB9XG4gIH0sXG4gIGRhdGFWaWV3OiB7XG4gICAgLy8gd2hlbiBlbmFibGVkLCB0aGlzIHdpbGwgcHJlc2VydmUgdGhlIHJvdyBzZWxlY3Rpb24gZXZlbiBhZnRlciBmaWx0ZXJpbmcvc29ydGluZy9ncm91cGluZ1xuICAgIHN5bmNHcmlkU2VsZWN0aW9uOiB7XG4gICAgICBwcmVzZXJ2ZUhpZGRlbjogZmFsc2UsXG4gICAgICBwcmVzZXJ2ZUhpZGRlbk9uU2VsZWN0aW9uQ2hhbmdlOiB0cnVlXG4gICAgfSxcbiAgICBzeW5jR3JpZFNlbGVjdGlvbldpdGhCYWNrZW5kU2VydmljZTogZmFsc2UsIC8vIGJ1dCBkaXNhYmxlIGl0IHdoZW4gdXNpbmcgYmFja2VuZCBzZXJ2aWNlc1xuICB9LFxuICBkYXRhc2V0SWRQcm9wZXJ0eU5hbWU6ICdpZCcsXG4gIGRlZmF1bHRGaWx0ZXI6IEZpbHRlcnMuaW5wdXQsXG4gIGRlZmF1bHRCYWNrZW5kU2VydmljZUZpbHRlclR5cGluZ0RlYm91bmNlOiA1MDAsXG4gIGRlZmF1bHRDb2x1bW5Tb3J0RmllbGRJZDogJ2lkJyxcbiAgZGVmYXVsdEZpbHRlclBsYWNlaG9sZGVyOiAn8J+Uju+4jicsXG4gIGRlZmF1bHRGaWx0ZXJSYW5nZU9wZXJhdG9yOiBPcGVyYXRvclR5cGUucmFuZ2VJbmNsdXNpdmUsXG4gIGVkaXRhYmxlOiBmYWxzZSxcbiAgZW5hYmxlQXV0b1Jlc2l6ZTogdHJ1ZSxcbiAgZW5hYmxlQXV0b1NpemVDb2x1bW5zOiB0cnVlLFxuICBlbmFibGVDZWxsTmF2aWdhdGlvbjogZmFsc2UsXG4gIGVuYWJsZUNvbHVtblBpY2tlcjogdHJ1ZSxcbiAgZW5hYmxlQ29sdW1uUmVvcmRlcjogdHJ1ZSxcbiAgZW5hYmxlQ29sdW1uUmVzaXplT25Eb3VibGVDbGljazogdHJ1ZSxcbiAgZW5hYmxlQ29udGV4dE1lbnU6IHRydWUsXG4gIGVuYWJsZUV4Y2VsRXhwb3J0OiB0cnVlLCAvLyBFeGNlbCBFeHBvcnQgaXMgdGhlIG5ldyBkZWZhdWx0LFxuICBlbmFibGVUZXh0RXhwb3J0OiBmYWxzZSwgLy8gQ1NWL1RleHQgd2l0aCBUYWIgRGVsaW1pdGVkXG4gIGVuYWJsZUZpbHRlclRyaW1XaGl0ZVNwYWNlOiBmYWxzZSwgLy8gZG8gd2Ugd2FudCB0byB0cmltIHdoaXRlIHNwYWNlcyBvbiBhbGwgRmlsdGVycz9cbiAgZW5hYmxlR3JpZE1lbnU6IHRydWUsXG4gIGVuYWJsZUhlYWRlck1lbnU6IHRydWUsXG4gIGVuYWJsZUVtcHR5RGF0YVdhcm5pbmdNZXNzYWdlOiB0cnVlLFxuICBlbXB0eURhdGFXYXJuaW5nOiB7XG4gICAgY2xhc3NOYW1lOiAnc2xpY2stZW1wdHktZGF0YS13YXJuaW5nJyxcbiAgICBtZXNzYWdlOiAnTm8gZGF0YSB0byBkaXNwbGF5LicsXG4gICAgbWVzc2FnZUtleTogJ0VNUFRZX0RBVEFfV0FSTklOR19NRVNTQUdFJyxcbiAgICBoaWRlRnJvemVuTGVmdFdhcm5pbmc6IGZhbHNlLFxuICAgIGhpZGVGcm96ZW5SaWdodFdhcm5pbmc6IGZhbHNlLFxuICAgIGxlZnRWaWV3cG9ydE1hcmdpbkxlZnQ6ICc0MCUnLFxuICAgIHJpZ2h0Vmlld3BvcnRNYXJnaW5MZWZ0OiAnNDAlJyxcbiAgICBmcm96ZW5MZWZ0Vmlld3BvcnRNYXJnaW5MZWZ0OiAnMHB4JyxcbiAgICBmcm96ZW5SaWdodFZpZXdwb3J0TWFyZ2luTGVmdDogJzQwJScsXG4gIH0sXG4gIGVuYWJsZU1vdXNlSG92ZXJIaWdobGlnaHRSb3c6IHRydWUsXG4gIGVuYWJsZVNvcnRpbmc6IHRydWUsXG4gIGVuYWJsZVRleHRTZWxlY3Rpb25PbkNlbGxzOiB0cnVlLFxuICBldmVudE5hbWluZ1N0eWxlOiBFdmVudE5hbWluZ1N0eWxlLmNhbWVsQ2FzZSxcbiAgZXhwbGljaXRJbml0aWFsaXphdGlvbjogdHJ1ZSxcbiAgZXhjZWxFeHBvcnRPcHRpb25zOiB7XG4gICAgYWRkR3JvdXBJbmRlbnRhdGlvbjogdHJ1ZSxcbiAgICBleHBvcnRXaXRoRm9ybWF0dGVyOiBmYWxzZSxcbiAgICBmaWxlbmFtZTogJ2V4cG9ydCcsXG4gICAgZm9ybWF0OiBGaWxlVHlwZS54bHN4LFxuICAgIGdyb3VwaW5nQ29sdW1uSGVhZGVyVGl0bGU6ICdHcm91cCBCeScsXG4gICAgZ3JvdXBDb2xsYXBzZWRTeW1ib2w6ICfirp4nLFxuICAgIGdyb3VwRXhwYW5kZWRTeW1ib2w6ICfirp8nLFxuICAgIGdyb3VwaW5nQWdncmVnYXRvclJvd1RleHQ6ICcnLFxuICAgIHNhbml0aXplRGF0YUV4cG9ydDogZmFsc2UsXG4gIH0sXG4gIHRleHRFeHBvcnRPcHRpb25zOiB7XG4gICAgZGVsaW1pdGVyOiBEZWxpbWl0ZXJUeXBlLmNvbW1hLFxuICAgIGV4cG9ydFdpdGhGb3JtYXR0ZXI6IGZhbHNlLFxuICAgIGZpbGVuYW1lOiAnZXhwb3J0JyxcbiAgICBmb3JtYXQ6IEZpbGVUeXBlLmNzdixcbiAgICBncm91cGluZ0NvbHVtbkhlYWRlclRpdGxlOiAnR3JvdXAgQnknLFxuICAgIGdyb3VwaW5nQWdncmVnYXRvclJvd1RleHQ6ICcnLFxuICAgIHNhbml0aXplRGF0YUV4cG9ydDogZmFsc2UsXG4gICAgdXNlVXRmOFdpdGhCb206IHRydWVcbiAgfSxcbiAgZmlsdGVyVHlwaW5nRGVib3VuY2U6IDAsXG4gIGZvcmNlRml0Q29sdW1uczogZmFsc2UsXG4gIGZyb3plbkhlYWRlcldpZHRoQ2FsY0RpZmZlcmVudGlhbDogMCxcbiAgZ3JpZE1lbnU6IHtcbiAgICBkcm9wU2lkZTogJ2xlZnQnLFxuICAgIGNvbW1hbmRMYWJlbHM6IHtcbiAgICAgIGNsZWFyQWxsRmlsdGVyc0NvbW1hbmRLZXk6ICdDTEVBUl9BTExfRklMVEVSUycsXG4gICAgICBjbGVhckFsbFNvcnRpbmdDb21tYW5kS2V5OiAnQ0xFQVJfQUxMX1NPUlRJTkcnLFxuICAgICAgY2xlYXJGcm96ZW5Db2x1bW5zQ29tbWFuZEtleTogJ0NMRUFSX1BJTk5JTkcnLFxuICAgICAgZXhwb3J0Q3N2Q29tbWFuZEtleTogJ0VYUE9SVF9UT19DU1YnLFxuICAgICAgZXhwb3J0RXhjZWxDb21tYW5kS2V5OiAnRVhQT1JUX1RPX0VYQ0VMJyxcbiAgICAgIGV4cG9ydFRleHREZWxpbWl0ZWRDb21tYW5kS2V5OiAnRVhQT1JUX1RPX1RBQl9ERUxJTUlURUQnLFxuICAgICAgcmVmcmVzaERhdGFzZXRDb21tYW5kS2V5OiAnUkVGUkVTSF9EQVRBU0VUJyxcbiAgICAgIHRvZ2dsZUZpbHRlckNvbW1hbmRLZXk6ICdUT0dHTEVfRklMVEVSX1JPVycsXG4gICAgICB0b2dnbGVQcmVIZWFkZXJDb21tYW5kS2V5OiAnVE9HR0xFX1BSRV9IRUFERVJfUk9XJyxcbiAgICB9LFxuICAgIGhpZGVDbGVhckFsbEZpbHRlcnNDb21tYW5kOiBmYWxzZSxcbiAgICBoaWRlQ2xlYXJBbGxTb3J0aW5nQ29tbWFuZDogZmFsc2UsXG4gICAgaGlkZUNsZWFyRnJvemVuQ29sdW1uc0NvbW1hbmQ6IHRydWUsIC8vIG9wdC1pbiBjb21tYW5kXG4gICAgaGlkZUV4cG9ydENzdkNvbW1hbmQ6IGZhbHNlLFxuICAgIGhpZGVFeHBvcnRFeGNlbENvbW1hbmQ6IGZhbHNlLFxuICAgIGhpZGVFeHBvcnRUZXh0RGVsaW1pdGVkQ29tbWFuZDogdHJ1ZSxcbiAgICBoaWRlRm9yY2VGaXRCdXR0b246IGZhbHNlLFxuICAgIGhpZGVSZWZyZXNoRGF0YXNldENvbW1hbmQ6IGZhbHNlLFxuICAgIGhpZGVTeW5jUmVzaXplQnV0dG9uOiB0cnVlLFxuICAgIGhpZGVUb2dnbGVGaWx0ZXJDb21tYW5kOiBmYWxzZSxcbiAgICBoaWRlVG9nZ2xlUHJlSGVhZGVyQ29tbWFuZDogZmFsc2UsXG4gICAgaWNvbkNzc0NsYXNzOiAnZmEgZmEtYmFycycsXG4gICAgaWNvbkNsZWFyQWxsRmlsdGVyc0NvbW1hbmQ6ICdmYSBmYS1maWx0ZXIgdGV4dC1kYW5nZXInLFxuICAgIGljb25DbGVhckFsbFNvcnRpbmdDb21tYW5kOiAnZmEgZmEtdW5zb3J0ZWQgdGV4dC1kYW5nZXInLFxuICAgIGljb25DbGVhckZyb3plbkNvbHVtbnNDb21tYW5kOiAnZmEgZmEtdGltZXMnLFxuICAgIGljb25FeHBvcnRDc3ZDb21tYW5kOiAnZmEgZmEtZG93bmxvYWQnLFxuICAgIGljb25FeHBvcnRFeGNlbENvbW1hbmQ6ICdmYSBmYS1maWxlLWV4Y2VsLW8gdGV4dC1zdWNjZXNzJyxcbiAgICBpY29uRXhwb3J0VGV4dERlbGltaXRlZENvbW1hbmQ6ICdmYSBmYS1kb3dubG9hZCcsXG4gICAgaWNvblJlZnJlc2hEYXRhc2V0Q29tbWFuZDogJ2ZhIGZhLXJlZnJlc2gnLFxuICAgIGljb25Ub2dnbGVGaWx0ZXJDb21tYW5kOiAnZmEgZmEtcmFuZG9tJyxcbiAgICBpY29uVG9nZ2xlUHJlSGVhZGVyQ29tbWFuZDogJ2ZhIGZhLXJhbmRvbScsXG4gICAgbWVudVdpZHRoOiAxNixcbiAgICByZXNpemVPblNob3dIZWFkZXJSb3c6IHRydWUsXG4gICAgaGVhZGVyQ29sdW1uVmFsdWVFeHRyYWN0b3I6IHBpY2tlckhlYWRlckNvbHVtblZhbHVlRXh0cmFjdG9yXG4gIH0sXG4gIGhlYWRlck1lbnU6IHtcbiAgICBhdXRvQWxpZ246IHRydWUsXG4gICAgYXV0b0FsaWduT2Zmc2V0OiAxMixcbiAgICBtaW5XaWR0aDogMTQwLFxuICAgIGljb25DbGVhckZpbHRlckNvbW1hbmQ6ICdmYSBmYS1maWx0ZXIgdGV4dC1kYW5nZXInLFxuICAgIGljb25DbGVhclNvcnRDb21tYW5kOiAnZmEgZmEtdW5zb3J0ZWQnLFxuICAgIGljb25GcmVlemVDb2x1bW5zOiAnZmEgZmEtdGh1bWItdGFjaycsXG4gICAgaWNvblNvcnRBc2NDb21tYW5kOiAnZmEgZmEtc29ydC1hbW91bnQtYXNjJyxcbiAgICBpY29uU29ydERlc2NDb21tYW5kOiAnZmEgZmEtc29ydC1hbW91bnQtZGVzYycsXG4gICAgaWNvbkNvbHVtbkhpZGVDb21tYW5kOiAnZmEgZmEtdGltZXMnLFxuICAgIGljb25Db2x1bW5SZXNpemVCeUNvbnRlbnRDb21tYW5kOiAnZmEgZmEtYXJyb3dzLWgnLFxuICAgIGhpZGVDb2x1bW5SZXNpemVCeUNvbnRlbnRDb21tYW5kOiBmYWxzZSxcbiAgICBoaWRlQ29sdW1uSGlkZUNvbW1hbmQ6IGZhbHNlLFxuICAgIGhpZGVDbGVhckZpbHRlckNvbW1hbmQ6IGZhbHNlLFxuICAgIGhpZGVDbGVhclNvcnRDb21tYW5kOiBmYWxzZSxcbiAgICBoaWRlRnJlZXplQ29sdW1uc0NvbW1hbmQ6IHRydWUsIC8vIG9wdC1pbiBjb21tYW5kXG4gICAgaGlkZVNvcnRDb21tYW5kczogZmFsc2VcbiAgfSxcbiAgaGVhZGVyUm93SGVpZ2h0OiAzNSxcbiAgbXVsdGlDb2x1bW5Tb3J0OiB0cnVlLFxuICBudW1iZXJlZE11bHRpQ29sdW1uU29ydDogdHJ1ZSxcbiAgdHJpc3RhdGVNdWx0aUNvbHVtblNvcnQ6IGZhbHNlLFxuICBzb3J0Q29sTnVtYmVySW5TZXBhcmF0ZVNwYW46IHRydWUsXG4gIHN1cHByZXNzQWN0aXZlQ2VsbENoYW5nZU9uRWRpdDogZmFsc2UsXG4gIHBhZ2luYXRpb246IHtcbiAgICBwYWdlU2l6ZXM6IFsxMCwgMTUsIDIwLCAyNSwgMzAsIDQwLCA1MCwgNzUsIDEwMF0sXG4gICAgcGFnZVNpemU6IDI1LFxuICAgIHRvdGFsSXRlbXM6IDBcbiAgfSxcbiAgLy8gdGVjaG5pY2FsbHkgc3BlYWtpbmcgdGhlIFJvdyBEZXRhaWwgcmVxdWlyZXMgdGhlIHByb2Nlc3MgJiB2aWV3Q29tcG9uZW50IGJ1dCB3ZSdsbCBpZ25vcmUgaXQganVzdCB0byBzZXQgY2VydGFpbiBvcHRpb25zXG4gIHJvd0RldGFpbFZpZXc6IHtcbiAgICBjb2xsYXBzZUFsbE9uU29ydDogdHJ1ZSxcbiAgICBjc3NDbGFzczogJ2RldGFpbC12aWV3LXRvZ2dsZScsXG4gICAgcGFuZWxSb3dzOiAxLFxuICAgIGtleVByZWZpeDogJ19fJyxcbiAgICB1c2VSb3dDbGljazogZmFsc2UsXG4gICAgdXNlU2ltcGxlVmlld3BvcnRDYWxjOiB0cnVlLFxuICAgIHNhdmVEZXRhaWxWaWV3T25TY3JvbGw6IGZhbHNlLFxuICB9IGFzIFJvd0RldGFpbFZpZXcsXG4gIHJvd0hlaWdodDogMzUsXG4gIHRvcFBhbmVsSGVpZ2h0OiAzNSxcbiAgdHJhbnNsYXRpb25OYW1lc3BhY2VTZXBhcmF0b3I6ICc6JyxcbiAgcmVzZXRGaWx0ZXJTZWFyY2hWYWx1ZUFmdGVyT25CZWZvcmVDYW5jZWxsYXRpb246IHRydWUsXG4gIHJlc2l6ZUJ5Q29udGVudE9ubHlPbkZpcnN0TG9hZDogdHJ1ZSxcbiAgcmVzaXplQnlDb250ZW50T3B0aW9uczoge1xuICAgIGFsd2F5c1JlY2FsY3VsYXRlQ29sdW1uV2lkdGg6IGZhbHNlLFxuICAgIGNlbGxDaGFyV2lkdGhJblB4OiA3LjgsXG4gICAgY2VsbFBhZGRpbmdXaWR0aEluUHg6IDE0LFxuICAgIGRlZmF1bHRSYXRpb0ZvclN0cmluZ1R5cGU6IDAuODgsXG4gICAgZm9ybWF0dGVyUGFkZGluZ1dpZHRoSW5QeDogMCxcbiAgICBtYXhJdGVtVG9JbnNwZWN0Q2VsbENvbnRlbnRXaWR0aDogMTAwMCxcbiAgICBtYXhJdGVtVG9JbnNwZWN0U2luZ2xlQ29sdW1uV2lkdGhCeUNvbnRlbnQ6IDUwMDAsXG4gICAgd2lkdGhUb1JlbW92ZUZyb21FeGNlZWRlZFdpZHRoUmVhZGp1c3RtZW50OiA1MCxcbiAgfSxcbiAgdHJlZURhdGFPcHRpb25zOiB7XG4gICAgZXhwb3J0SW5kZW50TWFyZ2luTGVmdDogNSxcbiAgICBleHBvcnRJbmRlbnRhdGlvbkxlYWRpbmdDaGFyOiAnzY/Nj82PzY/Nj82PzY/Nj82PwrcnLFxuICB9IGFzIHVua25vd24gYXMgVHJlZURhdGFPcHRpb25cbn07XG5cbi8qKlxuICogVmFsdWUgRXh0cmFjdG9yIGZvciBib3RoIENvbHVtblBpY2tlciAmIEdyaWRNZW51IFBpY2tlclxuICogd2hlbiB1c2luZyBDb2x1bW4gSGVhZGVyIEdyb3VwaW5nLCB3ZSdsbCBwcmVmaXggdGhlIGNvbHVtbiBncm91cCB0aXRsZVxuICogZWxzZSB3ZSdsbCBzaW1wbHkgcmV0dXJuIHRoZSBjb2x1bW4gbmFtZSB0aXRsZVxuICovXG5mdW5jdGlvbiBwaWNrZXJIZWFkZXJDb2x1bW5WYWx1ZUV4dHJhY3Rvcihjb2x1bW46IENvbHVtbikge1xuICBjb25zdCBoZWFkZXJHcm91cCA9IGNvbHVtbiAmJiBjb2x1bW4uY29sdW1uR3JvdXAgfHwgJyc7XG4gIGlmIChoZWFkZXJHcm91cCkge1xuICAgIHJldHVybiBoZWFkZXJHcm91cCArICcgLSAnICsgY29sdW1uLm5hbWU7XG4gIH1cbiAgcmV0dXJuIGNvbHVtbiAmJiBjb2x1bW4ubmFtZSB8fCAnJztcbn1cbiJdfQ==