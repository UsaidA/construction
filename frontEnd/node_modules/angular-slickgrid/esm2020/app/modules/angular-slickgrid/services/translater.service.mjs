import { Injectable, Optional } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
/**
 * This is a Translate Service Wrapper for Slickgrid-Universal monorepo lib to work properly,
 * it must implement Slickgrid-Universal TranslaterService interface to work properly
 */
export class TranslaterService {
    constructor(translateService) {
        this.translateService = translateService;
    }
    /**
     * Method to return the current language used by the App
     * @return {string} current language
     */
    getCurrentLanguage() {
        return this.translateService?.currentLang ?? '';
    }
    /**
     * Method to set the language to use in the App and Translate Service
     * @param {string} language
     * @return {Promise} output
     */
    async use(newLang) {
        return this.translateService?.use?.(newLang);
    }
    /**
     * Method which receives a translation key and returns the translated value assigned to that key
     * @param {string} translation key
     * @return {string} translated value
     */
    translate(translationKey) {
        return this.translateService?.instant?.(translationKey || ' ');
    }
}
TranslaterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TranslaterService, deps: [{ token: i1.TranslateService, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
TranslaterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TranslaterService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TranslaterService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.TranslateService, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC9tb2R1bGVzL2FuZ3VsYXItc2xpY2tncmlkL3NlcnZpY2VzL3RyYW5zbGF0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBSXJEOzs7R0FHRztBQUVILE1BQU0sT0FBTyxpQkFBaUI7SUFDNUIsWUFBeUMsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7SUFBSSxDQUFDO0lBRWhGOzs7T0FHRztJQUNILGtCQUFrQjtRQUNoQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLElBQUksRUFBRSxDQUFDO0lBQ2xELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFlO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsU0FBUyxDQUFDLGNBQXNCO1FBQzlCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxDQUFDLGNBQWMsSUFBSSxHQUFHLENBQVcsQ0FBQztJQUMzRSxDQUFDOzs4R0EzQlUsaUJBQWlCO2tIQUFqQixpQkFBaUI7MkZBQWpCLGlCQUFpQjtrQkFEN0IsVUFBVTs7MEJBRUksUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBUcmFuc2xhdGVyU2VydmljZSBhcyBVbml2ZXJzYWxUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQHNsaWNrZ3JpZC11bml2ZXJzYWwvY29tbW9uJztcblxuLyoqXG4gKiBUaGlzIGlzIGEgVHJhbnNsYXRlIFNlcnZpY2UgV3JhcHBlciBmb3IgU2xpY2tncmlkLVVuaXZlcnNhbCBtb25vcmVwbyBsaWIgdG8gd29yayBwcm9wZXJseSxcbiAqIGl0IG11c3QgaW1wbGVtZW50IFNsaWNrZ3JpZC1Vbml2ZXJzYWwgVHJhbnNsYXRlclNlcnZpY2UgaW50ZXJmYWNlIHRvIHdvcmsgcHJvcGVybHlcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0ZXJTZXJ2aWNlIGltcGxlbWVudHMgVW5pdmVyc2FsVHJhbnNsYXRlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByaXZhdGUgcmVhZG9ubHkgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSkgeyB9XG5cbiAgLyoqXG4gICAqIE1ldGhvZCB0byByZXR1cm4gdGhlIGN1cnJlbnQgbGFuZ3VhZ2UgdXNlZCBieSB0aGUgQXBwXG4gICAqIEByZXR1cm4ge3N0cmluZ30gY3VycmVudCBsYW5ndWFnZVxuICAgKi9cbiAgZ2V0Q3VycmVudExhbmd1YWdlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlU2VydmljZT8uY3VycmVudExhbmcgPz8gJyc7XG4gIH1cblxuICAvKipcbiAgICogTWV0aG9kIHRvIHNldCB0aGUgbGFuZ3VhZ2UgdG8gdXNlIGluIHRoZSBBcHAgYW5kIFRyYW5zbGF0ZSBTZXJ2aWNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBvdXRwdXRcbiAgICovXG4gIGFzeW5jIHVzZShuZXdMYW5nOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZVNlcnZpY2U/LnVzZT8uKG5ld0xhbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ldGhvZCB3aGljaCByZWNlaXZlcyBhIHRyYW5zbGF0aW9uIGtleSBhbmQgcmV0dXJucyB0aGUgdHJhbnNsYXRlZCB2YWx1ZSBhc3NpZ25lZCB0byB0aGF0IGtleVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHJhbnNsYXRpb24ga2V5XG4gICAqIEByZXR1cm4ge3N0cmluZ30gdHJhbnNsYXRlZCB2YWx1ZVxuICAgKi9cbiAgdHJhbnNsYXRlKHRyYW5zbGF0aW9uS2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZVNlcnZpY2U/Lmluc3RhbnQ/Lih0cmFuc2xhdGlvbktleSB8fCAnICcpIGFzIHN0cmluZztcbiAgfVxufVxuIl19