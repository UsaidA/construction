{"version":3,"file":"angular-slickgrid.mjs","sources":["../../src/app/modules/angular-slickgrid/services/angularUtil.service.ts","../../src/app/modules/angular-slickgrid/services/container.service.ts","../../src/app/modules/angular-slickgrid/services/translater.service.ts","../../src/app/modules/angular-slickgrid/services/utilities.ts","../../src/app/modules/angular-slickgrid/extensions/slickRowDetailView.ts","../../src/app/modules/angular-slickgrid/global-grid-options.ts","../../src/app/modules/angular-slickgrid/slickgrid-config.ts","../../src/app/modules/angular-slickgrid/constants.ts","../../src/app/modules/angular-slickgrid/components/angular-slickgrid.component.ts","../../src/app/modules/angular-slickgrid/components/angular-slickgrid.component.html","../../src/app/modules/angular-slickgrid/modules/angular-slickgrid.module.ts","../../src/angular-slickgrid.ts"],"sourcesContent":["import { AngularComponentOutput } from '../models/angularComponentOutput.interface';\nimport { ApplicationRef, ComponentFactoryResolver, EmbeddedViewRef, Injectable, Injector } from '@angular/core';\n\n@Injectable()\nexport class AngularUtilService {\n  constructor(\n    private compFactoryResolver: ComponentFactoryResolver,\n    private appRef: ApplicationRef,\n    private injector: Injector,\n  ) { }\n\n  // ref https://hackernoon.com/angular-pro-tip-how-to-dynamically-create-components-in-body-ba200cc289e6\n  createAngularComponent(component: any): AngularComponentOutput {\n    // Create a component reference from the component\n    const componentRef = this.compFactoryResolver\n      .resolveComponentFactory(component)\n      .create(this.injector);\n\n    // Attach component to the appRef so that it's inside the ng component tree\n    this.appRef.attachView(componentRef.hostView);\n\n    // Get DOM element from component\n    let domElem;\n    const viewRef = (componentRef.hostView as EmbeddedViewRef<any>);\n    if (viewRef && Array.isArray(viewRef.rootNodes) && viewRef.rootNodes[0]) {\n      domElem = viewRef.rootNodes[0] as HTMLElement;\n    }\n\n    return { componentRef, domElement: domElem as HTMLElement };\n  }\n\n  // ref https://hackernoon.com/angular-pro-tip-how-to-dynamically-create-components-in-body-ba200cc289e6\n  createAngularComponentAppendToDom(component: any, targetElement?: HTMLElement | Element, clearTargetContent = false): AngularComponentOutput {\n    const componentOutput = this.createAngularComponent(component);\n\n    // Append DOM element to the HTML element specified\n    if (targetElement && targetElement.appendChild) {\n      if (clearTargetContent && targetElement.innerHTML) {\n        targetElement.innerHTML = '';\n      }\n      targetElement.appendChild(componentOutput.domElement);\n    } else {\n      document.body.appendChild(componentOutput.domElement); // when no target provided, we'll simply add it to the HTML Body\n    }\n\n    return componentOutput;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ContainerInstance, ContainerService as UniversalContainerService } from '@slickgrid-universal/common';\n\n@Injectable()\nexport class ContainerService implements UniversalContainerService {\n  dependencies: ContainerInstance[] = [];\n\n  constructor() { }\n\n  get<T = any>(key: string): T | null {\n    const dependency = this.dependencies.find(dep => dep.key === key);\n    if (dependency?.instance) {\n      return dependency.instance;\n    }\n    return null;\n  }\n\n  dispose() {\n    this.dependencies = [];\n  }\n\n  registerInstance(key: string, instance: any) {\n    const dependency = this.dependencies.some(dep => dep.key === key);\n    if (!dependency) {\n      this.dependencies.push({ key, instance });\n    }\n  }\n}\n","import { Injectable, Optional } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { TranslaterService as UniversalTranslateService } from '@slickgrid-universal/common';\n\n/**\n * This is a Translate Service Wrapper for Slickgrid-Universal monorepo lib to work properly,\n * it must implement Slickgrid-Universal TranslaterService interface to work properly\n */\n@Injectable()\nexport class TranslaterService implements UniversalTranslateService {\n  constructor(@Optional() private readonly translateService: TranslateService) { }\n\n  /**\n   * Method to return the current language used by the App\n   * @return {string} current language\n   */\n  getCurrentLanguage(): string {\n    return this.translateService?.currentLang ?? '';\n  }\n\n  /**\n   * Method to set the language to use in the App and Translate Service\n   * @param {string} language\n   * @return {Promise} output\n   */\n  async use(newLang: string): Promise<any> {\n    return this.translateService?.use?.(newLang);\n  }\n\n  /**\n   * Method which receives a translation key and returns the translated value assigned to that key\n   * @param {string} translation key\n   * @return {string} translated value\n   */\n  translate(translationKey: string): string {\n    return this.translateService?.instant?.(translationKey || ' ') as string;\n  }\n}\n","/**\n * Unsubscribe all Observables Subscriptions\n * It will return an empty array if it all went well\n * @param subscriptions\n */\nexport function unsubscribeAllObservables(subscriptions: Array<{ unsubscribe: ()=> void; }>): any[] {\n  if (Array.isArray(subscriptions)) {\n    let subscription = subscriptions.pop();\n    while (subscription) {\n      if (typeof subscription.unsubscribe === 'function') {\n        subscription.unsubscribe();\n      }\n      subscription = subscriptions.pop();\n    }\n  }\n\n  // TODO: deprecated, remove the return type in next major version\n  return subscriptions;\n}\n","import { ApplicationRef, ComponentRef, Type, ViewContainerRef } from '@angular/core';\nimport {\n  addToArrayWhenNotExists,\n  castObservableToPromise,\n  EventSubscription,\n  RxJsFacade,\n  SlickEventHandler,\n  SlickGrid,\n  SlickRowSelectionModel,\n  unsubscribeAll,\n} from '@slickgrid-universal/common';\nimport { EventPubSubService } from '@slickgrid-universal/event-pub-sub';\nimport { SlickRowDetailView as UniversalSlickRowDetailView } from '@slickgrid-universal/row-detail-view-plugin';\nimport { Observable, Subject } from 'rxjs';\nimport * as DOMPurify from 'dompurify';\n\nimport { GridOption, RowDetailView } from '../models/index';\nimport { AngularUtilService } from '../services/angularUtil.service';\n\nconst ROW_DETAIL_CONTAINER_PREFIX = 'container_';\nconst PRELOAD_CONTAINER_PREFIX = 'container_loading';\n\nexport interface CreatedView {\n  id: string | number;\n  dataContext: any;\n  componentRef?: ComponentRef<any>;\n}\n\nexport class SlickRowDetailView extends UniversalSlickRowDetailView {\n  rowDetailContainer!: ViewContainerRef;\n  protected _eventHandler!: SlickEventHandler;\n  protected _preloadComponent: Type<object> | undefined;\n  protected _views: CreatedView[] = [];\n  protected _viewComponent!: Type<object>;\n  protected _subscriptions: EventSubscription[] = [];\n  protected _userProcessFn!: (item: any) => Promise<any> | Observable<any> | Subject<any>;\n\n  constructor(\n    protected readonly angularUtilService: AngularUtilService,\n    protected readonly appRef: ApplicationRef,\n    protected readonly eventPubSubService: EventPubSubService,\n    protected readonly gridContainerElement: HTMLDivElement,\n    protected rxjs?: RxJsFacade,\n  ) {\n    super(eventPubSubService);\n  }\n\n  get addonOptions() {\n    return this.getOptions();\n  }\n\n  protected get datasetIdPropName(): string {\n    return this.gridOptions.datasetIdPropertyName || 'id';\n  }\n\n  get eventHandler(): SlickEventHandler {\n    return this._eventHandler;\n  }\n  set eventHandler(eventHandler: SlickEventHandler) {\n    this._eventHandler = eventHandler;\n  }\n\n  /** Getter for the Grid Options pulled through the Grid Object */\n  get gridOptions(): GridOption {\n    return (this._grid?.getOptions() || {}) as GridOption;\n  }\n\n  get rowDetailViewOptions(): RowDetailView | undefined {\n    return this.gridOptions.rowDetailView;\n  }\n\n  addRxJsResource(rxjs: RxJsFacade) {\n    this.rxjs = rxjs;\n  }\n\n  /** Dispose of the RowDetailView Extension */\n  dispose() {\n    this.disposeAllViewComponents();\n    this._subscriptions = unsubscribeAll(this._subscriptions); // also unsubscribe all RxJS subscriptions\n    super.dispose();\n  }\n\n  /** Dispose of all the opened Row Detail Panels Angular View Components */\n  disposeAllViewComponents() {\n    this._views.forEach((compRef) => this.disposeViewComponent(compRef));\n    this._views = [];\n  }\n\n  /** Get the instance of the SlickGrid addon (control or plugin). */\n  getAddonInstance(): SlickRowDetailView | null {\n    return this;\n  }\n\n  init(grid: SlickGrid) {\n    this._grid = grid;\n    super.init(this._grid);\n    this.register(grid?.getSelectionModel());\n  }\n\n  /**\n   * Create the plugin before the Grid creation, else it will behave oddly.\n   * Mostly because the column definitions might change after the grid creation\n   */\n  register(rowSelectionPlugin?: SlickRowSelectionModel) {\n    if (typeof this.gridOptions.rowDetailView?.process === 'function') {\n      // we need to keep the user \"process\" method and replace it with our own execution method\n      // we do this because when we get the item detail, we need to call \"onAsyncResponse.notify\" for the plugin to work\n      this._userProcessFn = this.gridOptions.rowDetailView.process as (item: any) => Promise<any>;                // keep user's process method\n      this.gridOptions.rowDetailView.process = (item) => this.onProcessing(item);  // replace process method & run our internal one\n    } else {\n      throw new Error('[Angular-Slickgrid] You need to provide a \"process\" function for the Row Detail Extension to work properly');\n    }\n\n    if (this._grid && this.gridOptions?.rowDetailView) {\n      // load the Preload & RowDetail Templates (could be straight HTML or Angular View/ViewModel)\n      // when those are Angular View/ViewModel, we need to create View Component & provide the html containers to the Plugin (preTemplate/postTemplate methods)\n      if (!this.gridOptions.rowDetailView.preTemplate) {\n        this._preloadComponent = this.gridOptions?.rowDetailView?.preloadComponent;\n        this.gridOptions.rowDetailView.preTemplate = () => DOMPurify.sanitize(`<div class=\"${PRELOAD_CONTAINER_PREFIX}\"></div>`);\n      }\n      if (!this.gridOptions.rowDetailView.postTemplate) {\n        this._viewComponent = this.gridOptions?.rowDetailView?.viewComponent;\n        this.gridOptions.rowDetailView.postTemplate = (itemDetail: any) => DOMPurify.sanitize(`<div class=\"${ROW_DETAIL_CONTAINER_PREFIX}${itemDetail[this.datasetIdPropName]}\"></div>`);\n      }\n\n      // this also requires the Row Selection Model to be registered as well\n      if (!rowSelectionPlugin || !this._grid.getSelectionModel()) {\n        rowSelectionPlugin = new SlickRowSelectionModel(this.gridOptions.rowSelectionOptions || { selectActiveRow: true });\n        this._grid.setSelectionModel(rowSelectionPlugin);\n      }\n\n      // hook all events\n      if (this._grid && this.rowDetailViewOptions) {\n        if (this.rowDetailViewOptions.onExtensionRegistered) {\n          this.rowDetailViewOptions.onExtensionRegistered(this);\n        }\n\n        if (this.onAsyncResponse) {\n          this._eventHandler.subscribe(this.onAsyncResponse, (event, args) => {\n            if (this.rowDetailViewOptions && typeof this.rowDetailViewOptions.onAsyncResponse === 'function') {\n              this.rowDetailViewOptions.onAsyncResponse(event, args);\n            }\n          });\n        }\n\n        if (this.onAsyncEndUpdate) {\n          this._eventHandler.subscribe(this.onAsyncEndUpdate, (e: any, args: { grid: SlickGrid; item: any; }) => {\n            // triggers after backend called \"onAsyncResponse.notify()\"\n            this.renderViewModel(args?.item);\n\n            if (this.rowDetailViewOptions && typeof this.rowDetailViewOptions.onAsyncEndUpdate === 'function') {\n              this.rowDetailViewOptions.onAsyncEndUpdate(e, args);\n            }\n          });\n        }\n\n        if (this.onAfterRowDetailToggle) {\n          this._eventHandler.subscribe(this.onAfterRowDetailToggle, (e: any, args: { grid: SlickGrid; item: any; expandedRows: number[]; }) => {\n            // display preload template & re-render all the other Detail Views after toggling\n            // the preload View will eventually go away once the data gets loaded after the \"onAsyncEndUpdate\" event\n            this.renderPreloadView();\n            this.renderAllViewComponents();\n\n            if (this.rowDetailViewOptions && typeof this.rowDetailViewOptions.onAfterRowDetailToggle === 'function') {\n              this.rowDetailViewOptions.onAfterRowDetailToggle(e, args);\n            }\n          });\n        }\n\n        if (this.onBeforeRowDetailToggle) {\n          this._eventHandler.subscribe(this.onBeforeRowDetailToggle, (e, args) => {\n            // before toggling row detail, we need to create View Component if it doesn't exist\n            this.handleOnBeforeRowDetailToggle(e, args);\n\n            if (this.rowDetailViewOptions && typeof this.rowDetailViewOptions.onBeforeRowDetailToggle === 'function') {\n              this.rowDetailViewOptions.onBeforeRowDetailToggle(e, args);\n            }\n          });\n        }\n\n        if (this.onRowBackToViewportRange) {\n          this._eventHandler.subscribe(this.onRowBackToViewportRange, (e: any, args: { grid: SlickGrid; item: any; rowId: number; rowIndex: number; expandedRows: any[]; rowIdsOutOfViewport: number[]; }) => {\n            // when row is back to viewport range, we will re-render the View Component(s)\n            this.handleOnRowBackToViewportRange(e, args);\n\n            if (this.rowDetailViewOptions && typeof this.rowDetailViewOptions.onRowBackToViewportRange === 'function') {\n              this.rowDetailViewOptions.onRowBackToViewportRange(e, args);\n            }\n          });\n        }\n\n        if (this.onRowOutOfViewportRange) {\n          this._eventHandler.subscribe(this.onRowOutOfViewportRange, (e: any, args: { grid: SlickGrid; item: any; rowId: number; rowIndex: number; expandedRows: any[]; rowIdsOutOfViewport: number[]; }) => {\n            if (this.rowDetailViewOptions && typeof this.rowDetailViewOptions.onRowOutOfViewportRange === 'function') {\n              this.rowDetailViewOptions.onRowOutOfViewportRange(e, args);\n            }\n          });\n        }\n\n        // --\n        // hook some events needed by the Plugin itself\n\n        // we need to redraw the open detail views if we change column position (column reorder)\n        this._eventHandler.subscribe(this._grid.onColumnsReordered, this.redrawAllViewComponents.bind(this));\n\n        // on row selection changed, we also need to redraw\n        if (this.gridOptions.enableRowSelection || this.gridOptions.enableCheckboxSelector) {\n          this._eventHandler.subscribe(this._grid.onSelectedRowsChanged, this.redrawAllViewComponents.bind(this));\n        }\n\n        // on sort, all row detail are collapsed so we can dispose of all the Views as well\n        this._eventHandler.subscribe(this._grid.onSort, this.disposeAllViewComponents.bind(this));\n\n        // on filter changed, we need to re-render all Views\n        this._subscriptions.push(\n          this.eventPubSubService?.subscribe('onFilterChanged', this.redrawAllViewComponents.bind(this)),\n          this.eventPubSubService?.subscribe('onGridMenuClearAllFilters', () => setTimeout(() => this.redrawAllViewComponents())),\n          this.eventPubSubService?.subscribe('onGridMenuClearAllSorting', () => setTimeout(() => this.redrawAllViewComponents())),\n        );\n      }\n    }\n    return this;\n  }\n\n  /** Redraw (re-render) all the expanded row detail View Components */\n  redrawAllViewComponents() {\n    this._views.forEach((compRef) => {\n      this.redrawViewComponent(compRef);\n    });\n  }\n\n  /** Render all the expanded row detail View Components */\n  renderAllViewComponents() {\n    this._views.forEach((view) => {\n      if (view && view.dataContext) {\n        this.renderViewModel(view.dataContext);\n      }\n    });\n  }\n\n  /** Redraw the necessary View Component */\n  redrawViewComponent(createdView: CreatedView) {\n    const containerElements = this.gridContainerElement.getElementsByClassName(`${ROW_DETAIL_CONTAINER_PREFIX}${createdView.id}`);\n    if (containerElements && containerElements.length >= 0) {\n      this.renderViewModel(createdView.dataContext);\n    }\n  }\n\n  /** Render (or re-render) the View Component (Row Detail) */\n  renderPreloadView() {\n    const containerElements = this.gridContainerElement.getElementsByClassName(`${PRELOAD_CONTAINER_PREFIX}`);\n    if (containerElements && containerElements.length >= 0) {\n      this.angularUtilService.createAngularComponentAppendToDom(this._preloadComponent, containerElements[containerElements.length - 1], true);\n    }\n  }\n\n  /** Render (or re-render) the View Component (Row Detail) */\n  renderViewModel(item: any): CreatedView | undefined {\n    const containerElements = this.gridContainerElement.getElementsByClassName(`${ROW_DETAIL_CONTAINER_PREFIX}${item[this.datasetIdPropName]}`);\n    if (containerElements && containerElements.length > 0) {\n      const componentOutput = this.angularUtilService.createAngularComponentAppendToDom(this._viewComponent, containerElements[containerElements.length - 1], true);\n      if (componentOutput && componentOutput.componentRef && componentOutput.componentRef.instance) {\n        // pass a few properties to the Row Detail template component\n        Object.assign(componentOutput.componentRef.instance, {\n          model: item,\n          addon: this,\n          grid: this._grid,\n          dataView: this.dataView,\n          parent: this.rowDetailViewOptions && this.rowDetailViewOptions.parent,\n        });\n\n        const viewObj = this._views.find(obj => obj.id === item[this.datasetIdPropName]);\n        if (viewObj) {\n          viewObj.componentRef = componentOutput.componentRef;\n        }\n        return viewObj;\n      }\n    }\n    return undefined;\n  }\n\n  // --\n  // protected functions\n  // ------------------\n\n  protected disposeViewComponent(expandedView: CreatedView): CreatedView | void {\n    const compRef = expandedView?.componentRef;\n    if (compRef) {\n      this.appRef.detachView(compRef.hostView);\n      if (compRef?.destroy) {\n        compRef.destroy();\n      }\n      return expandedView;\n    }\n  }\n\n  /**\n   * notify the onAsyncResponse with the \"args.item\" (required property)\n   * the plugin will then use item to populate the row detail panel with the \"postTemplate\"\n   * @param item\n   */\n  protected notifyTemplate(item: any) {\n    if (this.onAsyncResponse) {\n      this.onAsyncResponse.notify({ item }, undefined, this);\n    }\n  }\n\n  /**\n   * On Processing, we will notify the plugin with the new item detail once backend server call completes\n   * @param item\n   */\n  protected async onProcessing(item: any) {\n    if (item && typeof this._userProcessFn === 'function') {\n      let awaitedItemDetail: any;\n      const userProcessFn = this._userProcessFn(item);\n\n      // wait for the \"userProcessFn\", once resolved we will save it into the \"collection\"\n      const response: any | any[] = await userProcessFn;\n\n      if (response.hasOwnProperty(this.datasetIdPropName)) {\n        awaitedItemDetail = response; // from Promise\n      } else if (response && response instanceof Observable || response instanceof Promise) {\n        awaitedItemDetail = await castObservableToPromise(this.rxjs as RxJsFacade, response); // from Angular-http-client\n      }\n\n      if (!awaitedItemDetail || !awaitedItemDetail.hasOwnProperty(this.datasetIdPropName)) {\n        throw new Error(`[Angular-Slickgrid] could not process the Row Detail, you must make sure that your \"process\" callback\n          (a Promise or an HttpClient call returning an Observable) returns an item object that has an \"${this.datasetIdPropName}\" property`);\n      }\n\n      // notify the plugin with the new item details\n      this.notifyTemplate(awaitedItemDetail || {});\n    }\n  }\n\n  /**\n   * Just before the row get expanded or collapsed we will do the following\n   * First determine if the row is expanding or collapsing,\n   * if it's expanding we will add it to our View Components reference array if we don't already have it\n   * or if it's collapsing we will remove it from our View Components reference array\n   */\n  protected handleOnBeforeRowDetailToggle(e: Event, args: { grid: SlickGrid; item: any; }) {\n    // expanding\n    if (args && args.item && args.item.__collapsed) {\n      // expanding row detail\n      const viewInfo: CreatedView = {\n        id: args.item[this.datasetIdPropName],\n        dataContext: args.item\n      };\n      const idPropName = this.gridOptions.datasetIdPropertyName || 'id';\n      addToArrayWhenNotExists(this._views, viewInfo, idPropName);\n    } else {\n      // collapsing, so dispose of the View/Component\n      const foundViewIndex = this._views.findIndex((view: CreatedView) => view.id === args.item[this.datasetIdPropName]);\n      if (foundViewIndex >= 0 && this._views.hasOwnProperty(foundViewIndex)) {\n        const compRef = this._views[foundViewIndex].componentRef;\n        if (compRef) {\n          this.appRef.detachView(compRef.hostView);\n          compRef.destroy();\n        }\n        this._views.splice(foundViewIndex, 1);\n      }\n    }\n  }\n\n  /** When Row comes back to Viewport Range, we need to redraw the View */\n  protected handleOnRowBackToViewportRange(e: Event, args: { grid: SlickGrid; item: any; rowId: number; rowIndex: number; expandedRows: any[]; rowIdsOutOfViewport: number[]; }) {\n    if (args?.item) {\n      this.redrawAllViewComponents();\n    }\n  }\n}\n","import { Column, DelimiterType, EventNamingStyle, FileType, Filters, OperatorType, TreeDataOption } from '@slickgrid-universal/common';\nimport { GridOption, RowDetailView } from './models/index';\n\n/** Global Grid Options Defaults */\nexport const GlobalGridOptions: Partial<GridOption> = {\n  alwaysShowVerticalScroll: true,\n  autoEdit: false,\n  asyncEditorLoading: false,\n  autoFitColumnsOnFirstLoad: true,\n  autoResize: {\n    applyResizeToContainer: true,\n    calculateAvailableSizeBy: 'window',\n    bottomPadding: 20,\n    minHeight: 180,\n    minWidth: 300,\n    rightPadding: 0\n  },\n  cellHighlightCssClass: 'slick-cell-modified',\n  checkboxSelector: {\n    cssClass: 'slick-cell-checkboxsel'\n  },\n  columnPicker: {\n    fadeSpeed: 0,\n    hideForceFitButton: false,\n    hideSyncResizeButton: true,\n    headerColumnValueExtractor: pickerHeaderColumnValueExtractor\n  },\n  cellMenu: {\n    autoAdjustDrop: true,\n    autoAlignSide: true,\n    hideCloseButton: true,\n    hideCommandSection: false,\n    hideOptionSection: false,\n  },\n  contextMenu: {\n    autoAdjustDrop: true,\n    autoAlignSide: true,\n    hideCloseButton: true,\n    hideClearAllGrouping: false,\n    hideCollapseAllGroups: false,\n    hideCommandSection: false,\n    hideCopyCellValueCommand: false,\n    hideExpandAllGroups: false,\n    hideExportCsvCommand: false,\n    hideExportExcelCommand: false,\n    hideExportTextDelimitedCommand: true,\n    hideMenuOnScroll: true,\n    hideOptionSection: false,\n    iconCopyCellValueCommand: 'fa fa-clone',\n    iconExportCsvCommand: 'fa fa-download',\n    iconExportExcelCommand: 'fa fa-file-excel-o text-success',\n    iconExportTextDelimitedCommand: 'fa fa-download',\n  },\n  customFooterOptions: {\n    dateFormat: 'YYYY-MM-DD, hh:mm a',\n    hideRowSelectionCount: false,\n    hideTotalItemCount: false,\n    hideLastUpdateTimestamp: true,\n    footerHeight: 25,\n    leftContainerClass: 'col-xs-12 col-sm-5',\n    rightContainerClass: 'col-xs-6 col-sm-7',\n    metricSeparator: '|',\n    metricTexts: {\n      items: 'items',\n      itemsKey: 'ITEMS',\n      itemsSelected: 'items selected',\n      itemsSelectedKey: 'ITEMS_SELECTED',\n      of: 'of',\n      ofKey: 'OF',\n    }\n  },\n  dataView: {\n    // when enabled, this will preserve the row selection even after filtering/sorting/grouping\n    syncGridSelection: {\n      preserveHidden: false,\n      preserveHiddenOnSelectionChange: true\n    },\n    syncGridSelectionWithBackendService: false, // but disable it when using backend services\n  },\n  datasetIdPropertyName: 'id',\n  defaultFilter: Filters.input,\n  defaultBackendServiceFilterTypingDebounce: 500,\n  defaultColumnSortFieldId: 'id',\n  defaultFilterPlaceholder: '🔎︎',\n  defaultFilterRangeOperator: OperatorType.rangeInclusive,\n  editable: false,\n  enableAutoResize: true,\n  enableAutoSizeColumns: true,\n  enableCellNavigation: false,\n  enableColumnPicker: true,\n  enableColumnReorder: true,\n  enableColumnResizeOnDoubleClick: true,\n  enableContextMenu: true,\n  enableExcelExport: true, // Excel Export is the new default,\n  enableTextExport: false, // CSV/Text with Tab Delimited\n  enableFilterTrimWhiteSpace: false, // do we want to trim white spaces on all Filters?\n  enableGridMenu: true,\n  enableHeaderMenu: true,\n  enableEmptyDataWarningMessage: true,\n  emptyDataWarning: {\n    className: 'slick-empty-data-warning',\n    message: 'No data to display.',\n    messageKey: 'EMPTY_DATA_WARNING_MESSAGE',\n    hideFrozenLeftWarning: false,\n    hideFrozenRightWarning: false,\n    leftViewportMarginLeft: '40%',\n    rightViewportMarginLeft: '40%',\n    frozenLeftViewportMarginLeft: '0px',\n    frozenRightViewportMarginLeft: '40%',\n  },\n  enableMouseHoverHighlightRow: true,\n  enableSorting: true,\n  enableTextSelectionOnCells: true,\n  eventNamingStyle: EventNamingStyle.camelCase,\n  explicitInitialization: true,\n  excelExportOptions: {\n    addGroupIndentation: true,\n    exportWithFormatter: false,\n    filename: 'export',\n    format: FileType.xlsx,\n    groupingColumnHeaderTitle: 'Group By',\n    groupCollapsedSymbol: '⮞',\n    groupExpandedSymbol: '⮟',\n    groupingAggregatorRowText: '',\n    sanitizeDataExport: false,\n  },\n  textExportOptions: {\n    delimiter: DelimiterType.comma,\n    exportWithFormatter: false,\n    filename: 'export',\n    format: FileType.csv,\n    groupingColumnHeaderTitle: 'Group By',\n    groupingAggregatorRowText: '',\n    sanitizeDataExport: false,\n    useUtf8WithBom: true\n  },\n  filterTypingDebounce: 0,\n  forceFitColumns: false,\n  frozenHeaderWidthCalcDifferential: 0,\n  gridMenu: {\n    dropSide: 'left',\n    commandLabels: {\n      clearAllFiltersCommandKey: 'CLEAR_ALL_FILTERS',\n      clearAllSortingCommandKey: 'CLEAR_ALL_SORTING',\n      clearFrozenColumnsCommandKey: 'CLEAR_PINNING',\n      exportCsvCommandKey: 'EXPORT_TO_CSV',\n      exportExcelCommandKey: 'EXPORT_TO_EXCEL',\n      exportTextDelimitedCommandKey: 'EXPORT_TO_TAB_DELIMITED',\n      refreshDatasetCommandKey: 'REFRESH_DATASET',\n      toggleFilterCommandKey: 'TOGGLE_FILTER_ROW',\n      togglePreHeaderCommandKey: 'TOGGLE_PRE_HEADER_ROW',\n    },\n    hideClearAllFiltersCommand: false,\n    hideClearAllSortingCommand: false,\n    hideClearFrozenColumnsCommand: true, // opt-in command\n    hideExportCsvCommand: false,\n    hideExportExcelCommand: false,\n    hideExportTextDelimitedCommand: true,\n    hideForceFitButton: false,\n    hideRefreshDatasetCommand: false,\n    hideSyncResizeButton: true,\n    hideToggleFilterCommand: false,\n    hideTogglePreHeaderCommand: false,\n    iconCssClass: 'fa fa-bars',\n    iconClearAllFiltersCommand: 'fa fa-filter text-danger',\n    iconClearAllSortingCommand: 'fa fa-unsorted text-danger',\n    iconClearFrozenColumnsCommand: 'fa fa-times',\n    iconExportCsvCommand: 'fa fa-download',\n    iconExportExcelCommand: 'fa fa-file-excel-o text-success',\n    iconExportTextDelimitedCommand: 'fa fa-download',\n    iconRefreshDatasetCommand: 'fa fa-refresh',\n    iconToggleFilterCommand: 'fa fa-random',\n    iconTogglePreHeaderCommand: 'fa fa-random',\n    menuWidth: 16,\n    resizeOnShowHeaderRow: true,\n    headerColumnValueExtractor: pickerHeaderColumnValueExtractor\n  },\n  headerMenu: {\n    autoAlign: true,\n    autoAlignOffset: 12,\n    minWidth: 140,\n    iconClearFilterCommand: 'fa fa-filter text-danger',\n    iconClearSortCommand: 'fa fa-unsorted',\n    iconFreezeColumns: 'fa fa-thumb-tack',\n    iconSortAscCommand: 'fa fa-sort-amount-asc',\n    iconSortDescCommand: 'fa fa-sort-amount-desc',\n    iconColumnHideCommand: 'fa fa-times',\n    iconColumnResizeByContentCommand: 'fa fa-arrows-h',\n    hideColumnResizeByContentCommand: false,\n    hideColumnHideCommand: false,\n    hideClearFilterCommand: false,\n    hideClearSortCommand: false,\n    hideFreezeColumnsCommand: true, // opt-in command\n    hideSortCommands: false\n  },\n  headerRowHeight: 35,\n  multiColumnSort: true,\n  numberedMultiColumnSort: true,\n  tristateMultiColumnSort: false,\n  sortColNumberInSeparateSpan: true,\n  suppressActiveCellChangeOnEdit: false,\n  pagination: {\n    pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\n    pageSize: 25,\n    totalItems: 0\n  },\n  // technically speaking the Row Detail requires the process & viewComponent but we'll ignore it just to set certain options\n  rowDetailView: {\n    collapseAllOnSort: true,\n    cssClass: 'detail-view-toggle',\n    panelRows: 1,\n    keyPrefix: '__',\n    useRowClick: false,\n    useSimpleViewportCalc: true,\n    saveDetailViewOnScroll: false,\n  } as RowDetailView,\n  rowHeight: 35,\n  topPanelHeight: 35,\n  translationNamespaceSeparator: ':',\n  resetFilterSearchValueAfterOnBeforeCancellation: true,\n  resizeByContentOnlyOnFirstLoad: true,\n  resizeByContentOptions: {\n    alwaysRecalculateColumnWidth: false,\n    cellCharWidthInPx: 7.8,\n    cellPaddingWidthInPx: 14,\n    defaultRatioForStringType: 0.88,\n    formatterPaddingWidthInPx: 0,\n    maxItemToInspectCellContentWidth: 1000,\n    maxItemToInspectSingleColumnWidthByContent: 5000,\n    widthToRemoveFromExceededWidthReadjustment: 50,\n  },\n  treeDataOptions: {\n    exportIndentMarginLeft: 5,\n    exportIndentationLeadingChar: '͏͏͏͏͏͏͏͏͏·',\n  } as unknown as TreeDataOption\n};\n\n/**\n * Value Extractor for both ColumnPicker & GridMenu Picker\n * when using Column Header Grouping, we'll prefix the column group title\n * else we'll simply return the column name title\n */\nfunction pickerHeaderColumnValueExtractor(column: Column) {\n  const headerGroup = column && column.columnGroup || '';\n  if (headerGroup) {\n    return headerGroup + ' - ' + column.name;\n  }\n  return column && column.name || '';\n}\n","import { GridOption } from './models/gridOption.interface';\nimport { GlobalGridOptions } from './global-grid-options';\n\nexport class SlickgridConfig {\n  options: Partial<GridOption>;\n\n  constructor() {\n    this.options = GlobalGridOptions;\n  }\n}\n","import { Locale } from '@slickgrid-universal/common';\n\nexport class Constants {\n  // English Locale texts when using only 1 Locale instead of I18N\n  static readonly locales: Locale = {\n    TEXT_ALL_SELECTED: 'All Selected',\n    TEXT_ALL_X_RECORDS_SELECTED: 'All {{x}} records selected',\n    TEXT_APPLY_MASS_UPDATE: 'Apply Mass Update',\n    TEXT_APPLY_TO_SELECTION: 'Update Selection',\n    TEXT_CANCEL: 'Cancel',\n    TEXT_CLEAR_ALL_FILTERS: 'Clear all Filters',\n    TEXT_CLEAR_ALL_GROUPING: 'Clear all Grouping',\n    TEXT_CLEAR_ALL_SORTING: 'Clear all Sorting',\n    TEXT_CLEAR_PINNING: 'Unfreeze Columns/Rows',\n    TEXT_CLONE: 'Clone',\n    TEXT_COLLAPSE_ALL_GROUPS: 'Collapse all Groups',\n    TEXT_CONTAINS: 'Contains',\n    TEXT_COLUMNS: 'Columns',\n    TEXT_COLUMN_RESIZE_BY_CONTENT: 'Resize by Content',\n    TEXT_COMMANDS: 'Commands',\n    TEXT_COPY: 'Copy',\n    TEXT_EQUALS: 'Equals',\n    TEXT_EQUAL_TO: 'Equal to',\n    TEXT_ENDS_WITH: 'Ends With',\n    TEXT_ERROR_EDITABLE_GRID_REQUIRED: 'Your grid must be editable in order to use the Composite Editor Modal.',\n    TEXT_ERROR_ENABLE_CELL_NAVIGATION_REQUIRED: 'Composite Editor requires the flag \"enableCellNavigation\" to be set to True in your Grid Options.',\n    TEXT_ERROR_NO_CHANGES_DETECTED: 'Sorry we could not detect any changes.',\n    TEXT_ERROR_NO_EDITOR_FOUND: 'We could not find any Editor in your Column Definition.',\n    TEXT_ERROR_NO_RECORD_FOUND: 'No records selected for edit or clone operation.',\n    TEXT_ERROR_ROW_NOT_EDITABLE: 'Current row is not editable.',\n    TEXT_ERROR_ROW_SELECTION_REQUIRED: 'You must select some rows before trying to apply new value(s).',\n    TEXT_EXPAND_ALL_GROUPS: 'Expand all Groups',\n    TEXT_EXPORT_TO_CSV: 'Export in CSV format',\n    TEXT_EXPORT_TO_TEXT_FORMAT: 'Export in Text format (Tab delimited)',\n    TEXT_EXPORT_TO_EXCEL: 'Export to Excel',\n    TEXT_EXPORT_TO_TAB_DELIMITED: 'Export in Text format (Tab delimited)',\n    TEXT_FORCE_FIT_COLUMNS: 'Force fit columns',\n    TEXT_FREEZE_COLUMNS: 'Freeze Columns',\n    TEXT_GREATER_THAN: 'Greater than',\n    TEXT_GREATER_THAN_OR_EQUAL_TO: 'Greater than or equal to',\n    TEXT_GROUP_BY: 'Group By',\n    TEXT_HIDE_COLUMN: 'Hide Column',\n    TEXT_ITEMS: 'items',\n    TEXT_ITEMS_PER_PAGE: 'items per page',\n    TEXT_ITEMS_SELECTED: 'items selected',\n    TEXT_OF: 'of',\n    TEXT_OK: 'OK',\n    TEXT_LAST_UPDATE: 'Last Update',\n    TEXT_LESS_THAN: 'Less than',\n    TEXT_LESS_THAN_OR_EQUAL_TO: 'Less than or equal to',\n    TEXT_NO_ELEMENTS_FOUND: 'Aucun élément trouvé',\n    TEXT_NOT_CONTAINS: 'Not contains',\n    TEXT_NOT_EQUAL_TO: 'Not equal to',\n    TEXT_PAGE: 'Page',\n    TEXT_REFRESH_DATASET: 'Refresh Dataset',\n    TEXT_REMOVE_FILTER: 'Remove Filter',\n    TEXT_REMOVE_SORT: 'Remove Sort',\n    TEXT_SAVE: 'Save',\n    TEXT_SELECT_ALL: 'Select All',\n    TEXT_SYNCHRONOUS_RESIZE: 'Synchronous resize',\n    TEXT_SORT_ASCENDING: 'Sort Ascending',\n    TEXT_SORT_DESCENDING: 'Sort Descending',\n    TEXT_STARTS_WITH: 'Starts With',\n    TEXT_TOGGLE_FILTER_ROW: 'Toggle Filter Row',\n    TEXT_TOGGLE_PRE_HEADER_ROW: 'Toggle Pre-Header Row',\n    TEXT_X_OF_Y_SELECTED: '# of % selected',\n    TEXT_X_OF_Y_MASS_SELECTED: '{{x}} of {{y}} selected',\n  };\n\n  static readonly treeDataProperties = {\n    CHILDREN_PROP: 'children',\n    COLLAPSED_PROP: '__collapsed',\n    HAS_CHILDREN_PROP: '__hasChildren',\n    TREE_LEVEL_PROP: '__treeLevel',\n    PARENT_PROP: '__parentId',\n  };\n\n  // some Validation default texts\n  static readonly VALIDATION_REQUIRED_FIELD = 'Field is required';\n  static readonly VALIDATION_EDITOR_VALID_NUMBER = 'Please enter a valid number';\n  static readonly VALIDATION_EDITOR_VALID_INTEGER = 'Please enter a valid integer number';\n  static readonly VALIDATION_EDITOR_INTEGER_BETWEEN = 'Please enter a valid integer number between {{minValue}} and {{maxValue}}';\n  static readonly VALIDATION_EDITOR_INTEGER_MAX = 'Please enter a valid integer number that is lower than {{maxValue}}';\n  static readonly VALIDATION_EDITOR_INTEGER_MAX_INCLUSIVE = 'Please enter a valid integer number that is lower than or equal to {{maxValue}}';\n  static readonly VALIDATION_EDITOR_INTEGER_MIN = 'Please enter a valid integer number that is greater than {{minValue}}';\n  static readonly VALIDATION_EDITOR_INTEGER_MIN_INCLUSIVE = 'Please enter a valid integer number that is greater than or equal to {{minValue}}';\n  static readonly VALIDATION_EDITOR_NUMBER_BETWEEN = 'Please enter a valid number between {{minValue}} and {{maxValue}}';\n  static readonly VALIDATION_EDITOR_NUMBER_MAX = 'Please enter a valid number that is lower than {{maxValue}}';\n  static readonly VALIDATION_EDITOR_NUMBER_MAX_INCLUSIVE = 'Please enter a valid number that is lower than or equal to {{maxValue}}';\n  static readonly VALIDATION_EDITOR_NUMBER_MIN = 'Please enter a valid number that is greater than {{minValue}}';\n  static readonly VALIDATION_EDITOR_NUMBER_MIN_INCLUSIVE = 'Please enter a valid number that is greater than or equal to {{minValue}}';\n  static readonly VALIDATION_EDITOR_DECIMAL_BETWEEN = 'Please enter a valid number with a maximum of {{maxDecimal}} decimals';\n  static readonly VALIDATION_EDITOR_TEXT_LENGTH_BETWEEN = 'Please make sure your text length is between {{minLength}} and {{maxLength}} characters';\n  static readonly VALIDATION_EDITOR_TEXT_MAX_LENGTH = 'Please make sure your text is less than {{maxLength}} characters';\n  static readonly VALIDATION_EDITOR_TEXT_MAX_LENGTH_INCLUSIVE = 'Please make sure your text is less than or equal to {{maxLength}} characters';\n  static readonly VALIDATION_EDITOR_TEXT_MIN_LENGTH = 'Please make sure your text is more than {{minLength}} character(s)';\n  static readonly VALIDATION_EDITOR_TEXT_MIN_LENGTH_INCLUSIVE = 'Please make sure your text is at least {{minLength}} character(s)';\n}\n","// import 3rd party vendor libs\nimport 'slickgrid/slick.core';\nimport 'slickgrid/slick.interactions';\nimport 'slickgrid/slick.grid';\nimport 'slickgrid/slick.dataview';\n\n// ...then everything else...\nimport { AfterViewInit, ApplicationRef, ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, OnDestroy, Optional, Output, } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\n\nimport {\n  // interfaces/types\n  AutocompleterEditor,\n  BackendServiceApi,\n  BackendServiceOption,\n  Column,\n  ColumnEditor,\n  DataViewOption,\n  EventSubscription,\n  ExtensionName,\n  ExternalResource,\n  Locale,\n  Metrics,\n  Pagination,\n  SelectEditor,\n  ServicePagination,\n  SlickDataView,\n  SlickEventHandler,\n  SlickGrid,\n  SlickNamespace,\n\n  // services\n  BackendUtilityService,\n  CollectionService,\n  EventNamingStyle,\n  ExtensionService,\n  ExtensionUtility,\n  FilterFactory,\n  FilterService,\n  GridEventService,\n  GridService,\n  GridStateService,\n  GroupingAndColspanService,\n  PaginationService,\n  ResizerService,\n  RxJsFacade,\n  SharedService,\n  SlickgridConfig,\n  SlickGroupItemMetadataProvider,\n  SortService,\n  TreeDataService,\n\n  // utilities\n  autoAddEditorFormatterToColumnsWithEditor,\n  emptyElement,\n  GridStateType,\n  unsubscribeAll,\n} from '@slickgrid-universal/common';\nimport { EventPubSubService } from '@slickgrid-universal/event-pub-sub';\nimport { SlickEmptyWarningComponent } from '@slickgrid-universal/empty-warning-component';\nimport { SlickFooterComponent } from '@slickgrid-universal/custom-footer-component';\nimport { SlickPaginationComponent } from '@slickgrid-universal/pagination-component';\nimport { RxJsResource } from '@slickgrid-universal/rxjs-observable';\nimport { dequal } from 'dequal/lite';\n\nimport { Constants } from '../constants';\nimport { AngularGridInstance, ExternalTestingDependencies, GridOption, } from './../models/index';\nimport { GlobalGridOptions } from './../global-grid-options';\nimport { TranslaterService } from '../services/translater.service';\n\n// Services\nimport { AngularUtilService } from '../services/angularUtil.service';\nimport { SlickRowDetailView } from '../extensions/slickRowDetailView';\nimport { ContainerService } from '../services/container.service';\n\n// using external non-typed js libraries\ndeclare const Slick: SlickNamespace;\n\n@Component({\n  selector: 'angular-slickgrid',\n  templateUrl: './angular-slickgrid.component.html',\n  providers: [\n    // make everything transient (non-singleton)\n    AngularUtilService,\n    ApplicationRef,\n    TranslaterService,\n  ]\n})\nexport class AngularSlickgridComponent implements AfterViewInit, OnDestroy {\n  private _dataset?: any[] | null;\n  private _columnDefinitions!: Column[];\n  private _currentDatasetLength = 0;\n  private _eventHandler: SlickEventHandler = new Slick.EventHandler();\n  private _eventPubSubService!: EventPubSubService;\n  private _angularGridInstances: AngularGridInstance | undefined;\n  private _hideHeaderRowAfterPageLoad = false;\n  private _isGridInitialized = false;\n  private _isDatasetInitialized = false;\n  private _isDatasetHierarchicalInitialized = false;\n  private _isPaginationInitialized = false;\n  private _isLocalGrid = true;\n  private _paginationOptions: Pagination | undefined;\n  private _registeredResources: ExternalResource[] = [];\n  dataView!: SlickDataView;\n  slickGrid!: SlickGrid;\n  groupingDefinition: any = {};\n  groupItemMetadataProvider?: SlickGroupItemMetadataProvider;\n  backendServiceApi?: BackendServiceApi;\n  locales!: Locale;\n  metrics?: Metrics;\n  showPagination = false;\n  serviceList: any[] = [];\n  totalItems = 0;\n  paginationData?: {\n    gridOptions: GridOption;\n    paginationService: PaginationService;\n  };\n  subscriptions: EventSubscription[] = [];\n\n  // components / plugins\n  slickEmptyWarning?: SlickEmptyWarningComponent;\n  slickFooter?: SlickFooterComponent;\n  slickPagination?: SlickPaginationComponent;\n  slickRowDetailView?: SlickRowDetailView;\n\n  // services\n  backendUtilityService!: BackendUtilityService;\n  collectionService: CollectionService;\n  extensionService: ExtensionService;\n  extensionUtility: ExtensionUtility;\n  filterFactory!: FilterFactory;\n  filterService: FilterService;\n  gridEventService: GridEventService;\n  gridService: GridService;\n  gridStateService: GridStateService;\n  groupingService: GroupingAndColspanService;\n  paginationService: PaginationService;\n  resizerService!: ResizerService;\n  rxjs?: RxJsFacade;\n  sharedService: SharedService;\n  sortService: SortService;\n  treeDataService: TreeDataService;\n\n  @Input() customDataView: any;\n  @Input() gridId: string = '';\n  @Input() gridOptions!: GridOption;\n\n  @Input()\n  get paginationOptions(): Pagination | undefined {\n    return this._paginationOptions;\n  }\n  set paginationOptions(newPaginationOptions: Pagination | undefined) {\n    if (newPaginationOptions && this._paginationOptions) {\n      this._paginationOptions = { ...this.gridOptions.pagination, ...this._paginationOptions, ...newPaginationOptions };\n    } else {\n      this._paginationOptions = newPaginationOptions;\n    }\n    this.gridOptions.pagination = this._paginationOptions ?? this.gridOptions.pagination;\n    this.paginationService.updateTotalItems(this.gridOptions.pagination?.totalItems ?? 0, true);\n  }\n\n  @Input()\n  set columnDefinitions(columnDefinitions: Column[]) {\n    this._columnDefinitions = columnDefinitions;\n    if (this._isGridInitialized) {\n      this.updateColumnDefinitionsList(columnDefinitions);\n    }\n    if (columnDefinitions.length > 0) {\n      this.copyColumnWidthsReference(columnDefinitions);\n    }\n  }\n  get columnDefinitions(): Column[] {\n    return this._columnDefinitions;\n  }\n\n  // make the columnDefinitions a 2-way binding so that plugin adding cols\n  // are synched on user's side as well (RowMove, RowDetail, RowSelections)\n  @Output() columnDefinitionsChange = new EventEmitter(true);\n\n  @Input()\n  get dataset(): any[] {\n    return (this.customDataView ? this.slickGrid?.getData?.() : this.dataView?.getItems?.()) || [];\n  }\n  set dataset(newDataset: any[]) {\n    const prevDatasetLn = this._currentDatasetLength;\n    const isDatasetEqual = dequal(newDataset, this._dataset || []);\n    let data = newDataset;\n\n    // when Tree Data is enabled and we don't yet have the hierarchical dataset filled, we can force a convert+sort of the array\n    if (this.slickGrid && this.gridOptions?.enableTreeData && Array.isArray(newDataset) && (newDataset.length > 0 || newDataset.length !== prevDatasetLn || !isDatasetEqual)) {\n      this._isDatasetHierarchicalInitialized = false;\n      data = this.sortTreeDataset(newDataset, !isDatasetEqual); // if dataset changed, then force a refresh anyway\n    }\n    this._dataset = data;\n    this.refreshGridData(data || []);\n    this._currentDatasetLength = (newDataset || []).length;\n\n    // expand/autofit columns on first page load\n    // we can assume that if the prevDataset was empty then we are on first load\n    if (this.gridOptions?.autoFitColumnsOnFirstLoad && prevDatasetLn === 0) {\n      this.slickGrid.autosizeColumns();\n    }\n  }\n\n  @Input()\n  get datasetHierarchical(): any[] | undefined {\n    return this.sharedService.hierarchicalDataset;\n  }\n  set datasetHierarchical(newHierarchicalDataset: any[] | undefined) {\n    const isDatasetEqual = dequal(newHierarchicalDataset, this.sharedService?.hierarchicalDataset ?? []);\n    const prevFlatDatasetLn = this._currentDatasetLength;\n    this.sharedService.hierarchicalDataset = newHierarchicalDataset;\n\n    if (newHierarchicalDataset && this.columnDefinitions && this.filterService?.clearFilters) {\n      this.filterService.clearFilters();\n    }\n\n    // when a hierarchical dataset is set afterward, we can reset the flat dataset and call a tree data sort that will overwrite the flat dataset\n    if (newHierarchicalDataset && this.slickGrid && this.sortService?.processTreeDataInitialSort) {\n      this.dataView.setItems([], this.gridOptions.datasetIdPropertyName ?? 'id');\n      this.sortService.processTreeDataInitialSort();\n\n      // we also need to reset/refresh the Tree Data filters because if we inserted new item(s) then it might not show up without doing this refresh\n      // however we need 1 cpu cycle before having the DataView refreshed, so we need to wrap this check in a setTimeout\n      setTimeout(() => {\n        const flatDatasetLn = this.dataView.getItemCount();\n        if (flatDatasetLn > 0 && (flatDatasetLn !== prevFlatDatasetLn || !isDatasetEqual)) {\n          this.filterService.refreshTreeDataFilters();\n        }\n      });\n      this._isDatasetHierarchicalInitialized = true;\n    }\n  }\n\n  get elementRef(): ElementRef {\n    return this.elm;\n  }\n\n  get eventHandler(): SlickEventHandler {\n    return this._eventHandler;\n  }\n\n  get gridContainerElement(): HTMLElement | null {\n    return document.querySelector(`#${this.gridOptions.gridContainerId || ''}`);\n  }\n\n  /** GETTER to know if dataset was initialized or not */\n  get isDatasetInitialized(): boolean {\n    return this._isDatasetInitialized;\n  }\n  /** SETTER to change if dataset was initialized or not (stringly used for unit testing purposes) */\n  set isDatasetInitialized(isInitialized: boolean) {\n    this._isDatasetInitialized = isInitialized;\n  }\n  set isDatasetHierarchicalInitialized(isInitialized: boolean) {\n    this._isDatasetHierarchicalInitialized = isInitialized;\n  }\n\n  get registeredResources(): ExternalResource[] {\n    return this._registeredResources;\n  }\n\n  constructor(\n    private readonly angularUtilService: AngularUtilService,\n    private readonly appRef: ApplicationRef,\n    private readonly cd: ChangeDetectorRef,\n    private readonly containerService: ContainerService,\n    private readonly elm: ElementRef,\n    @Optional() private readonly translate: TranslateService,\n    @Optional() private readonly translaterService: TranslaterService,\n    @Inject('config') private forRootConfig: GridOption,\n    @Inject('externalService') externalServices: ExternalTestingDependencies\n  ) {\n    const slickgridConfig = new SlickgridConfig();\n\n    // initialize and assign all Service Dependencies\n    this._eventPubSubService = externalServices?.eventPubSubService ?? new EventPubSubService(this.elm.nativeElement);\n    this._eventPubSubService.eventNamingStyle = EventNamingStyle.camelCase;\n\n    this.backendUtilityService = externalServices?.backendUtilityService ?? new BackendUtilityService();\n    this.gridEventService = externalServices?.gridEventService ?? new GridEventService();\n    this.sharedService = externalServices?.sharedService ?? new SharedService();\n    this.collectionService = externalServices?.collectionService ?? new CollectionService(this.translaterService);\n    this.extensionUtility = externalServices?.extensionUtility ?? new ExtensionUtility(this.sharedService, this.backendUtilityService, this.translaterService);\n    this.filterFactory = new FilterFactory(slickgridConfig, this.translaterService, this.collectionService);\n    this.filterService = externalServices?.filterService ?? new FilterService(this.filterFactory as any, this._eventPubSubService, this.sharedService, this.backendUtilityService);\n    this.resizerService = externalServices?.resizerService ?? new ResizerService(this._eventPubSubService);\n    this.sortService = externalServices?.sortService ?? new SortService(this.sharedService, this._eventPubSubService, this.backendUtilityService);\n    this.treeDataService = externalServices?.treeDataService ?? new TreeDataService(this._eventPubSubService, this.sharedService, this.sortService);\n    this.paginationService = externalServices?.paginationService ?? new PaginationService(this._eventPubSubService, this.sharedService, this.backendUtilityService);\n\n    this.extensionService = externalServices?.extensionService ?? new ExtensionService(\n      this.extensionUtility,\n      this.filterService,\n      this._eventPubSubService,\n      this.sharedService,\n      this.sortService,\n      this.treeDataService,\n      this.translaterService,\n    );\n\n    this.gridStateService = externalServices?.gridStateService ?? new GridStateService(this.extensionService, this.filterService, this._eventPubSubService, this.sharedService, this.sortService, this.treeDataService);\n    this.gridService = externalServices?.gridService ?? new GridService(this.gridStateService, this.filterService, this._eventPubSubService, this.paginationService, this.sharedService, this.sortService, this.treeDataService);\n    this.groupingService = externalServices?.groupingAndColspanService ?? new GroupingAndColspanService(this.extensionUtility, this._eventPubSubService);\n\n    this.serviceList = [\n      this.containerService,\n      this.extensionService,\n      this.filterService,\n      this.gridEventService,\n      this.gridService,\n      this.gridStateService,\n      this.groupingService,\n      this.paginationService,\n      this.resizerService,\n      this.sortService,\n      this.treeDataService,\n    ];\n\n    // register all Service instances in the container\n    this.containerService.registerInstance('ExtensionUtility', this.extensionUtility);\n    this.containerService.registerInstance('FilterService', this.filterService);\n    this.containerService.registerInstance('CollectionService', this.collectionService);\n    this.containerService.registerInstance('ExtensionService', this.extensionService);\n    this.containerService.registerInstance('GridEventService', this.gridEventService);\n    this.containerService.registerInstance('GridService', this.gridService);\n    this.containerService.registerInstance('GridStateService', this.gridStateService);\n    this.containerService.registerInstance('GroupingAndColspanService', this.groupingService);\n    this.containerService.registerInstance('PaginationService', this.paginationService);\n    this.containerService.registerInstance('ResizerService', this.resizerService);\n    this.containerService.registerInstance('SharedService', this.sharedService);\n    this.containerService.registerInstance('SortService', this.sortService);\n    this.containerService.registerInstance('EventPubSubService', this._eventPubSubService);\n    this.containerService.registerInstance('PubSubService', this._eventPubSubService);\n    this.containerService.registerInstance('TranslaterService', this.translaterService);\n    this.containerService.registerInstance('TreeDataService', this.treeDataService);\n  }\n\n  ngAfterViewInit() {\n    if (!this.gridOptions || !this.columnDefinitions) {\n      throw new Error('Using `<angular-slickgrid>` requires [gridOptions] and [columnDefinitions], it seems that you might have forgot to provide them since at least of them is undefined.');\n    }\n    this.initialization(this._eventHandler);\n    this._isGridInitialized = true;\n\n    // recheck the empty warning message after grid is shown so that it works in every use case\n    if (this.gridOptions && this.gridOptions.enableEmptyDataWarningMessage && Array.isArray(this.dataset)) {\n      const finalTotalCount = this.dataset.length;\n      this.displayEmptyDataWarning(finalTotalCount < 1);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._eventPubSubService.publish('onBeforeGridDestroy', this.slickGrid);\n    this.destroy();\n    this._eventPubSubService.publish('onAfterGridDestroyed', true);\n  }\n\n  destroy(shouldEmptyDomElementContainer = false) {\n    // dispose of all Services\n    this.serviceList.forEach((service: any) => {\n      if (service && service.dispose) {\n        service.dispose();\n      }\n    });\n    this.serviceList = [];\n\n    // dispose all registered external resources\n    if (Array.isArray(this._registeredResources)) {\n      while (this._registeredResources.length > 0) {\n        const resource = this._registeredResources.pop();\n        if (resource?.dispose) {\n          resource.dispose();\n        }\n      }\n      this._registeredResources = [];\n    }\n\n    // dispose the Components\n    this.slickEmptyWarning?.dispose();\n    this.slickFooter?.dispose();\n    this.slickPagination?.dispose();\n\n    if (this._eventHandler?.unsubscribeAll) {\n      this._eventHandler.unsubscribeAll();\n    }\n    this._eventPubSubService?.unsubscribeAll();\n    if (this.dataView) {\n      if (this.dataView?.setItems) {\n        this.dataView.setItems([]);\n      }\n      if (this.dataView.destroy) {\n        this.dataView.destroy();\n      }\n    }\n    if (this.slickGrid?.destroy) {\n      this.slickGrid.destroy(shouldEmptyDomElementContainer);\n    }\n\n    if (this.backendServiceApi) {\n      for (const prop of Object.keys(this.backendServiceApi)) {\n        delete this.backendServiceApi[prop as keyof BackendServiceApi];\n      }\n      this.backendServiceApi = undefined;\n    }\n    for (const prop of Object.keys(this.columnDefinitions)) {\n      (this.columnDefinitions as any)[prop] = null;\n    }\n    for (const prop of Object.keys(this.sharedService)) {\n      (this.sharedService as any)[prop] = null;\n    }\n\n    // we could optionally also empty the content of the grid container DOM element\n    if (shouldEmptyDomElementContainer) {\n      this.emptyGridContainerElm();\n    }\n\n    // also unsubscribe all RxJS subscriptions\n    this.subscriptions = unsubscribeAll(this.subscriptions);\n\n    this._dataset = null;\n    this.datasetHierarchical = undefined;\n    this._columnDefinitions = [];\n    this._angularGridInstances = undefined;\n    this.slickGrid = undefined as any;\n  }\n\n  emptyGridContainerElm() {\n    const gridContainerId = this.gridOptions?.gridContainerId ?? 'grid1';\n    const gridContainerElm = document.querySelector(`#${gridContainerId}`);\n    emptyElement(gridContainerElm);\n  }\n\n  /**\n   * Define our internal Post Process callback, it will execute internally after we get back result from the Process backend call\n   * For now, this is GraphQL Service ONLY feature and it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\n   */\n  createBackendApiInternalPostProcessCallback(gridOptions: GridOption) {\n    const backendApi = gridOptions && gridOptions.backendServiceApi;\n    if (backendApi && backendApi.service) {\n      const backendApiService = backendApi.service;\n\n      // internalPostProcess only works (for now) with a GraphQL Service, so make sure it is of that type\n      if (typeof backendApiService.getDatasetName === 'function') {\n        backendApi.internalPostProcess = (processResult: any) => {\n          const datasetName = (backendApi && backendApiService && typeof backendApiService.getDatasetName === 'function') ? backendApiService.getDatasetName() : '';\n          if (processResult?.data[datasetName]) {\n            const data = processResult.data[datasetName].hasOwnProperty('nodes') ? (processResult as any).data[datasetName].nodes : (processResult as any).data[datasetName];\n            const totalCount = processResult.data[datasetName].hasOwnProperty('totalCount') ? (processResult as any).data[datasetName].totalCount : (processResult as any).data[datasetName].length;\n            this.refreshGridData(data, totalCount || 0);\n          }\n        };\n      }\n    }\n  }\n\n  initialization(eventHandler: SlickEventHandler) {\n    this.gridOptions.translater = this.translaterService;\n    this._eventHandler = eventHandler;\n\n    // when detecting a frozen grid, we'll automatically enable the mousewheel scroll handler so that we can scroll from both left/right frozen containers\n    if (this.gridOptions && ((this.gridOptions.frozenRow !== undefined && this.gridOptions.frozenRow >= 0) || this.gridOptions.frozenColumn !== undefined && this.gridOptions.frozenColumn >= 0) && this.gridOptions.enableMouseWheelScrollHandler === undefined) {\n      this.gridOptions.enableMouseWheelScrollHandler = true;\n    }\n\n    this._eventPubSubService.eventNamingStyle = this.gridOptions?.eventNamingStyle ?? EventNamingStyle.camelCase;\n    this._eventPubSubService.publish('onBeforeGridCreate', true);\n\n    // make sure the dataset is initialized (if not it will throw an error that it cannot getLength of null)\n    this._dataset = this._dataset || [];\n    this.gridOptions = this.mergeGridOptions(this.gridOptions);\n    this._paginationOptions = this.gridOptions?.pagination;\n    this.locales = this.gridOptions?.locales ?? Constants.locales;\n    this.backendServiceApi = this.gridOptions?.backendServiceApi;\n    this._isLocalGrid = !this.backendServiceApi; // considered a local grid if it doesn't have a backend service set\n\n    this.createBackendApiInternalPostProcessCallback(this.gridOptions);\n\n    if (!this.customDataView) {\n      const dataviewInlineFilters = this.gridOptions.dataView && this.gridOptions.dataView.inlineFilters || false;\n      let dataViewOptions: DataViewOption = { inlineFilters: dataviewInlineFilters };\n\n      if (this.gridOptions.draggableGrouping || this.gridOptions.enableGrouping) {\n        this.groupItemMetadataProvider = new SlickGroupItemMetadataProvider();\n        this.sharedService.groupItemMetadataProvider = this.groupItemMetadataProvider;\n        dataViewOptions = { ...dataViewOptions, groupItemMetadataProvider: this.groupItemMetadataProvider };\n      }\n      this.dataView = new Slick.Data.DataView(dataViewOptions);\n      this._eventPubSubService.publish('onDataviewCreated', this.dataView);\n    }\n\n    // get any possible Services that user want to register which don't require SlickGrid to be instantiated\n    // RxJS Resource is in this lot because it has to be registered before anything else and doesn't require SlickGrid to be initialized\n    this.preRegisterResources();\n\n    // for convenience to the user, we provide the property \"editor\" as an Angular-Slickgrid editor complex object\n    // however \"editor\" is used internally by SlickGrid for it's own Editor Factory\n    // so in our lib we will swap \"editor\" and copy it into a new property called \"internalColumnEditor\"\n    // then take back \"editor.model\" and make it the new \"editor\" so that SlickGrid Editor Factory still works\n    this._columnDefinitions = this.swapInternalEditorToSlickGridFactoryEditor(this._columnDefinitions);\n\n    // if the user wants to automatically add a Custom Editor Formatter, we need to call the auto add function again\n    if (this.gridOptions.autoAddCustomEditorFormatter) {\n      autoAddEditorFormatterToColumnsWithEditor(this._columnDefinitions, this.gridOptions.autoAddCustomEditorFormatter);\n    }\n\n    // save reference for all columns before they optionally become hidden/visible\n    this.sharedService.allColumns = this._columnDefinitions;\n    this.sharedService.visibleColumns = this._columnDefinitions;\n\n    // before certain extentions/plugins potentially adds extra columns not created by the user itself (RowMove, RowDetail, RowSelections)\n    // we'll subscribe to the event and push back the change to the user so they always use full column defs array including extra cols\n    this.subscriptions.push(\n      this._eventPubSubService.subscribe<{ columns: Column[]; grid: SlickGrid; }>('onPluginColumnsChanged', data => {\n        this._columnDefinitions = data.columns;\n        this.columnDefinitionsChange.emit(this._columnDefinitions);\n      })\n    );\n\n    // after subscribing to potential columns changed, we are ready to create these optional extensions\n    // when we did find some to create (RowMove, RowDetail, RowSelections), it will automatically modify column definitions (by previous subscribe)\n    this.extensionService.createExtensionsBeforeGridCreation(this._columnDefinitions, this.gridOptions);\n\n    // if user entered some Pinning/Frozen \"presets\", we need to apply them in the grid options\n    if (this.gridOptions.presets?.pinning) {\n      this.gridOptions = { ...this.gridOptions, ...this.gridOptions.presets.pinning };\n    }\n\n    // build SlickGrid Grid, also user might optionally pass a custom dataview (e.g. remote model)\n    this.slickGrid = new Slick.Grid(`#${this.gridId}`, this.customDataView || this.dataView, this._columnDefinitions, this.gridOptions);\n    this.sharedService.dataView = this.dataView;\n    this.sharedService.slickGrid = this.slickGrid;\n    this.sharedService.gridContainerElement = this.elm.nativeElement as HTMLDivElement;\n\n    this.extensionService.bindDifferentExtensions();\n    this.bindDifferentHooks(this.slickGrid, this.gridOptions, this.dataView);\n\n    // when it's a frozen grid, we need to keep the frozen column id for reference if we ever show/hide column from ColumnPicker/GridMenu afterward\n    const frozenColumnIndex = this.gridOptions.frozenColumn !== undefined ? this.gridOptions.frozenColumn : -1;\n    if (frozenColumnIndex >= 0 && frozenColumnIndex <= this._columnDefinitions.length) {\n      this.sharedService.frozenVisibleColumnId = this._columnDefinitions[frozenColumnIndex].id || '';\n    }\n\n    // get any possible Services that user want to register\n    this.registerResources();\n\n    // initialize the SlickGrid grid\n    this.slickGrid.init();\n\n    // initialized the resizer service only after SlickGrid is initialized\n    // if we don't we end up binding our resize to a grid element that doesn't yet exist in the DOM and the resizer service will fail silently (because it has a try/catch that unbinds the resize without throwing back)\n    if (this.gridContainerElement) {\n      this.resizerService.init(this.slickGrid, this.gridContainerElement as HTMLDivElement);\n    }\n\n    // user could show a custom footer with the data metrics (dataset length and last updated timestamp)\n    if (!this.gridOptions.enablePagination && this.gridOptions.showCustomFooter && this.gridOptions.customFooterOptions && this.gridContainerElement) {\n      this.slickFooter = new SlickFooterComponent(this.slickGrid, this.gridOptions.customFooterOptions, this._eventPubSubService, this.translaterService);\n      this.slickFooter.renderFooter(this.gridContainerElement);\n    }\n\n    if (!this.customDataView && this.dataView) {\n      // load the data in the DataView (unless it's a hierarchical dataset, if so it will be loaded after the initial tree sort)\n      const initialDataset = this.gridOptions?.enableTreeData ? this.sortTreeDataset(this._dataset) : this._dataset;\n      this.dataView.beginUpdate();\n      this.dataView.setItems(initialDataset || [], this.gridOptions.datasetIdPropertyName ?? 'id');\n      this.dataView.endUpdate();\n\n      // if you don't want the items that are not visible (due to being filtered out or being on a different page)\n      // to stay selected, pass 'false' to the second arg\n      if (this.slickGrid?.getSelectionModel() && this.gridOptions && this.gridOptions.dataView && this.gridOptions.dataView.hasOwnProperty('syncGridSelection')) {\n        // if we are using a Backend Service, we will do an extra flag check, the reason is because it might have some unintended behaviors\n        // with the BackendServiceApi because technically the data in the page changes the DataView on every page change.\n        let preservedRowSelectionWithBackend = false;\n        if (this.gridOptions.backendServiceApi && this.gridOptions.dataView.hasOwnProperty('syncGridSelectionWithBackendService')) {\n          preservedRowSelectionWithBackend = this.gridOptions.dataView.syncGridSelectionWithBackendService as boolean;\n        }\n\n        const syncGridSelection = this.gridOptions.dataView.syncGridSelection;\n        if (typeof syncGridSelection === 'boolean') {\n          let preservedRowSelection = syncGridSelection;\n          if (!this._isLocalGrid) {\n            // when using BackendServiceApi, we'll be using the \"syncGridSelectionWithBackendService\" flag BUT \"syncGridSelection\" must also be set to True\n            preservedRowSelection = syncGridSelection && preservedRowSelectionWithBackend;\n          }\n          this.dataView.syncGridSelection(this.slickGrid, preservedRowSelection);\n        } else if (typeof syncGridSelection === 'object') {\n          this.dataView.syncGridSelection(this.slickGrid, syncGridSelection.preserveHidden, syncGridSelection.preserveHiddenOnSelectionChange);\n        }\n      }\n\n      const datasetLn = this.dataView.getLength() || this._dataset && this._dataset.length || 0;\n      if (datasetLn > 0) {\n        if (!this._isDatasetInitialized && (this.gridOptions.enableCheckboxSelector || this.gridOptions.enableRowSelection)) {\n          this.loadRowSelectionPresetWhenExists();\n        }\n        this.loadFilterPresetsWhenDatasetInitialized();\n        this._isDatasetInitialized = true;\n      }\n    }\n\n    // user might want to hide the header row on page load but still have `enableFiltering: true`\n    // if that is the case, we need to hide the headerRow ONLY AFTER all filters got created & dataView exist\n    if (this._hideHeaderRowAfterPageLoad) {\n      this.showHeaderRow(false);\n      this.sharedService.hideHeaderRowAfterPageLoad = this._hideHeaderRowAfterPageLoad;\n    }\n\n    // publish & dispatch certain events\n    this._eventPubSubService.publish('onGridCreated', this.slickGrid);\n\n    // after the DataView is created & updated execute some processes\n    if (!this.customDataView) {\n      this.executeAfterDataviewCreated(this.slickGrid, this.gridOptions);\n    }\n\n    // bind resize ONLY after the dataView is ready\n    this.bindResizeHook(this.slickGrid, this.gridOptions);\n\n    // bind the Backend Service API callback functions only after the grid is initialized\n    // because the preProcess() and onInit() might get triggered\n    if (this.gridOptions?.backendServiceApi) {\n      this.bindBackendCallbackFunctions(this.gridOptions);\n    }\n\n    // local grid, check if we need to show the Pagination\n    // if so then also check if there's any presets and finally initialize the PaginationService\n    // a local grid with Pagination presets will potentially have a different total of items, we'll need to get it from the DataView and update our total\n    if (this.gridOptions?.enablePagination && this._isLocalGrid) {\n      this.showPagination = true;\n      this.loadLocalGridPagination(this.dataset);\n    }\n\n    this._angularGridInstances = {\n      // Slick Grid & DataView objects\n      dataView: this.dataView,\n      slickGrid: this.slickGrid,\n      extensions: this.extensionService?.extensionList,\n\n      // public methods\n      destroy: this.destroy.bind(this),\n\n      // return all available Services (non-singleton)\n      backendService: this.gridOptions?.backendServiceApi?.service,\n      eventPubSubService: this._eventPubSubService,\n      filterService: this.filterService,\n      gridEventService: this.gridEventService,\n      gridStateService: this.gridStateService,\n      gridService: this.gridService,\n      groupingService: this.groupingService,\n      extensionService: this.extensionService,\n      paginationService: this.paginationService,\n      resizerService: this.resizerService,\n      sortService: this.sortService,\n      treeDataService: this.treeDataService,\n    };\n\n    // all instances (SlickGrid, DataView & all Services)\n    this._eventPubSubService.publish('onAngularGridCreated', this._angularGridInstances);\n  }\n\n  /**\n   * On a Pagination changed, we will trigger a Grid State changed with the new pagination info\n   * Also if we use Row Selection or the Checkbox Selector with a Backend Service (Odata, GraphQL), we need to reset any selection\n   */\n  paginationChanged(pagination: ServicePagination) {\n    const isSyncGridSelectionEnabled = this.gridStateService?.needToPreserveRowSelection() ?? false;\n    if (this.slickGrid && !isSyncGridSelectionEnabled && this.gridOptions?.backendServiceApi && (this.gridOptions.enableRowSelection || this.gridOptions.enableCheckboxSelector)) {\n      this.slickGrid.setSelectedRows([]);\n    }\n    const { pageNumber, pageSize } = pagination;\n    if (this.sharedService) {\n      if (pageSize !== undefined && pageNumber !== undefined) {\n        this.sharedService.currentPagination = { pageNumber, pageSize };\n      }\n    }\n    this._eventPubSubService.publish('onGridStateChanged', {\n      change: { newValues: { pageNumber, pageSize }, type: GridStateType.pagination },\n      gridState: this.gridStateService.getCurrentGridState()\n    });\n    this.cd.markForCheck();\n  }\n\n  /**\n   * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well\n   * @param dataset\n   */\n  refreshGridData(dataset: any[], totalCount?: number) {\n    if (this.gridOptions && this.gridOptions.enableEmptyDataWarningMessage && Array.isArray(dataset)) {\n      const finalTotalCount = totalCount || dataset.length;\n      this.displayEmptyDataWarning(finalTotalCount < 1);\n    }\n\n    if (Array.isArray(dataset) && this.slickGrid && this.dataView?.setItems) {\n      this.dataView.setItems(dataset, this.gridOptions.datasetIdPropertyName ?? 'id');\n      if (!this.gridOptions.backendServiceApi && !this.gridOptions.enableTreeData) {\n        this.dataView.reSort();\n      }\n\n      if (dataset.length > 0) {\n        if (!this._isDatasetInitialized) {\n          this.loadFilterPresetsWhenDatasetInitialized();\n\n          if (this.gridOptions.enableCheckboxSelector) {\n            this.loadRowSelectionPresetWhenExists();\n          }\n        }\n        this._isDatasetInitialized = true;\n      }\n\n      if (dataset) {\n        this.slickGrid.invalidate();\n      }\n\n      // display the Pagination component only after calling this refresh data first, we call it here so that if we preset pagination page number it will be shown correctly\n      this.showPagination = (this.gridOptions && (this.gridOptions.enablePagination || (this.gridOptions.backendServiceApi && this.gridOptions.enablePagination === undefined))) ? true : false;\n\n      if (this._paginationOptions && this.gridOptions?.pagination && this.gridOptions?.backendServiceApi) {\n        const paginationOptions = this.setPaginationOptionsWhenPresetDefined(this.gridOptions, this._paginationOptions as Pagination);\n        // when we have a totalCount use it, else we'll take it from the pagination object\n        // only update the total items if it's different to avoid refreshing the UI\n        const totalRecords = (totalCount !== undefined) ? totalCount : (this.gridOptions?.pagination?.totalItems);\n        if (totalRecords !== undefined && totalRecords !== this.totalItems) {\n          this.totalItems = +totalRecords;\n        }\n\n        // initialize the Pagination Service with new pagination options (which might have presets)\n        if (!this._isPaginationInitialized) {\n          this.initializePaginationService(paginationOptions);\n        } else {\n          // update the pagination service with the new total\n          this.paginationService.updateTotalItems(this.totalItems);\n        }\n      }\n\n      // resize the grid inside a slight timeout, in case other DOM element changed prior to the resize (like a filter/pagination changed)\n      if (this.slickGrid && this.gridOptions.enableAutoResize) {\n        const delay = this.gridOptions.autoResize && this.gridOptions.autoResize.delay;\n        this.resizerService.resizeGrid(delay || 10);\n      }\n    }\n  }\n\n  /**\n   * Check if there's any Pagination Presets defined in the Grid Options,\n   * if there are then load them in the paginationOptions object\n   */\n  setPaginationOptionsWhenPresetDefined(gridOptions: GridOption, paginationOptions: Pagination): Pagination {\n    if (gridOptions.presets?.pagination && paginationOptions && !this._isPaginationInitialized) {\n      paginationOptions.pageSize = gridOptions.presets.pagination.pageSize;\n      paginationOptions.pageNumber = gridOptions.presets.pagination.pageNumber;\n    }\n    return paginationOptions;\n  }\n\n  /**\n   * Dynamically change or update the column definitions list.\n   * We will re-render the grid so that the new header and data shows up correctly.\n   * If using i18n, we also need to trigger a re-translate of the column headers\n   */\n  updateColumnDefinitionsList(newColumnDefinitions: Column[]) {\n    // map/swap the internal library Editor to the SlickGrid Editor factory\n    newColumnDefinitions = this.swapInternalEditorToSlickGridFactoryEditor(newColumnDefinitions);\n\n    if (this.gridOptions.enableTranslate) {\n      this.extensionService.translateColumnHeaders(false, newColumnDefinitions);\n    } else {\n      this.extensionService.renderColumnHeaders(newColumnDefinitions, true);\n    }\n\n    if (this.gridOptions?.enableAutoSizeColumns) {\n      this.slickGrid.autosizeColumns();\n    } else if (this.gridOptions?.enableAutoResizeColumnsByCellContent && this.resizerService?.resizeColumnsByCellContent) {\n      this.resizerService.resizeColumnsByCellContent();\n    }\n  }\n\n  /**\n   * Show the filter row displayed on first row, we can optionally pass false to hide it.\n   * @param showing\n   */\n  showHeaderRow(showing = true) {\n    this.slickGrid.setHeaderRowVisibility(showing, false);\n    if (showing === true && this._isGridInitialized) {\n      this.slickGrid.setColumns(this.columnDefinitions);\n    }\n    return showing;\n  }\n\n  //\n  // private functions\n  // ------------------\n\n  /**\n   * Loop through all column definitions and copy the original optional `width` properties optionally provided by the user.\n   * We will use this when doing a resize by cell content, if user provided a `width` it won't override it.\n   */\n  private copyColumnWidthsReference(columnDefinitions: Column[]) {\n    columnDefinitions.forEach(col => col.originalWidth = col.width);\n  }\n\n  private displayEmptyDataWarning(showWarning = true) {\n    this.slickEmptyWarning?.showEmptyDataMessage(showWarning);\n  }\n\n  private bindDifferentHooks(grid: SlickGrid, gridOptions: GridOption, dataView: SlickDataView) {\n    // on locale change, we have to manually translate the Headers, GridMenu\n    if (this.translate?.onLangChange) {\n      // translate some of them on first load, then on each language change\n      if (gridOptions.enableTranslate) {\n        this.extensionService.translateAllExtensions();\n        this.translateColumnHeaderTitleKeys();\n        this.translateColumnGroupKeys();\n      }\n\n      this.subscriptions.push(\n        this.translate.onLangChange.subscribe(() => {\n          // publish event of the same name that Slickgrid-Universal uses on a language change event\n          this._eventPubSubService.publish('onLanguageChange');\n\n          if (gridOptions.enableTranslate) {\n            this.extensionService.translateAllExtensions();\n            this.translateColumnHeaderTitleKeys();\n            this.translateColumnGroupKeys();\n            if (gridOptions.createPreHeaderPanel && !gridOptions.enableDraggableGrouping) {\n              this.groupingService.translateGroupingAndColSpan();\n            }\n          }\n        })\n      );\n    }\n\n    // if user set an onInit Backend, we'll run it right away (and if so, we also need to run preProcess, internalPostProcess & postProcess)\n    if (gridOptions.backendServiceApi) {\n      const backendApi = gridOptions.backendServiceApi;\n\n      if (backendApi?.service?.init) {\n        backendApi.service.init(backendApi.options, gridOptions.pagination, this.slickGrid, this.sharedService);\n      }\n    }\n\n    if (dataView && grid) {\n      const slickgridEventPrefix = this.gridOptions?.defaultSlickgridEventPrefix ?? '';\n\n      // expose all Slick Grid Events through dispatch\n      for (const prop in grid) {\n        if (grid.hasOwnProperty(prop) && prop.startsWith('on')) {\n          const gridEventName = this._eventPubSubService.getEventNameByNamingConvention(prop, slickgridEventPrefix);\n          this._eventHandler.subscribe((grid as any)[prop], (event, args) => {\n            return this._eventPubSubService.dispatchCustomEvent(gridEventName, { eventData: event, args });\n          });\n        }\n      }\n\n      // expose all Slick DataView Events through dispatch\n      for (const prop in dataView) {\n        if (dataView.hasOwnProperty(prop) && prop.startsWith('on')) {\n          this._eventHandler.subscribe((dataView as any)[prop], (event, args) => {\n            const dataViewEventName = this._eventPubSubService.getEventNameByNamingConvention(prop, slickgridEventPrefix);\n            return this._eventPubSubService.dispatchCustomEvent(dataViewEventName, { eventData: event, args });\n          });\n        }\n      }\n\n      // on cell click, mainly used with the columnDef.action callback\n      this.gridEventService.bindOnCellChange(grid);\n      this.gridEventService.bindOnClick(grid);\n\n      if (dataView && grid) {\n        // bind external sorting (backend) when available or default onSort (dataView)\n        if (gridOptions.enableSorting) {\n          // bind external sorting (backend) unless specified to use the local one\n          if (gridOptions.backendServiceApi && !gridOptions.backendServiceApi.useLocalSorting) {\n            this.sortService.bindBackendOnSort(grid);\n          } else {\n            this.sortService.bindLocalOnSort(grid);\n          }\n        }\n\n        // bind external filter (backend) when available or default onFilter (dataView)\n        if (gridOptions.enableFiltering) {\n          this.filterService.init(grid);\n\n          // bind external filter (backend) unless specified to use the local one\n          if (gridOptions.backendServiceApi && !gridOptions.backendServiceApi.useLocalFiltering) {\n            this.filterService.bindBackendOnFilter(grid);\n          } else {\n            this.filterService.bindLocalOnFilter(grid);\n          }\n        }\n\n        // when column are reordered, we need to update the visibleColumn array\n        this._eventHandler.subscribe(grid.onColumnsReordered, (_e, args) => {\n          this.sharedService.hasColumnsReordered = true;\n          this.sharedService.visibleColumns = args.impactedColumns;\n        });\n\n        // load any presets if any (after dataset is initialized)\n        this.loadColumnPresetsWhenDatasetInitialized();\n        this.loadFilterPresetsWhenDatasetInitialized();\n\n        // When data changes in the DataView, we need to refresh the metrics and/or display a warning if the dataset is empty\n        this._eventHandler.subscribe(dataView.onRowCountChanged, () => {\n          grid.invalidate();\n          this.handleOnItemCountChanged(dataView.getFilteredItemCount() || 0, dataView.getItemCount() || 0);\n        });\n        this._eventHandler.subscribe(dataView.onSetItemsCalled, (_e, args) => {\n          this.handleOnItemCountChanged(dataView.getFilteredItemCount() || 0, args.itemCount);\n\n          // when user has resize by content enabled, we'll force a full width calculation since we change our entire dataset\n          if (args.itemCount > 0 && (this.gridOptions.autosizeColumnsByCellContentOnFirstLoad || this.gridOptions.enableAutoResizeColumnsByCellContent)) {\n            this.resizerService.resizeColumnsByCellContent(!this.gridOptions?.resizeByContentOnlyOnFirstLoad);\n          }\n        });\n\n        if (gridOptions?.enableFiltering && !gridOptions.enableRowDetailView) {\n          this._eventHandler.subscribe(dataView.onRowsChanged, (_e, args) => {\n            // filtering data with local dataset will not always show correctly unless we call this updateRow/render\n            // also don't use \"invalidateRows\" since it destroys the entire row and as bad user experience when updating a row\n            // see commit: https://github.com/ghiscoding/aurelia-slickgrid/commit/8c503a4d45fba11cbd8d8cc467fae8d177cc4f60\n            if (args?.rows && Array.isArray(args.rows)) {\n              args.rows.forEach((row: number) => grid.updateRow(row));\n              grid.render();\n            }\n          });\n        }\n      }\n    }\n\n    // did the user add a colspan callback? If so, hook it into the DataView getItemMetadata\n    if (gridOptions && gridOptions.colspanCallback && dataView && dataView.getItem && dataView.getItemMetadata) {\n      dataView.getItemMetadata = (rowNumber: number) => {\n        let callbackResult = null;\n        if (gridOptions.colspanCallback && gridOptions.colspanCallback) {\n          callbackResult = gridOptions.colspanCallback(dataView.getItem(rowNumber));\n        }\n        return callbackResult;\n      };\n    }\n  }\n\n  private bindBackendCallbackFunctions(gridOptions: GridOption) {\n    const backendApi = gridOptions.backendServiceApi;\n    const backendApiService = backendApi && backendApi.service;\n    const serviceOptions: BackendServiceOption = backendApiService?.options ?? {};\n    const isExecuteCommandOnInit = (!serviceOptions) ? false : ((serviceOptions && serviceOptions.hasOwnProperty('executeProcessCommandOnInit')) ? serviceOptions['executeProcessCommandOnInit'] : true);\n\n    if (backendApiService) {\n      // update backend filters (if need be) BEFORE the query runs (via the onInit command a few lines below)\n      // if user entered some any \"presets\", we need to reflect them all in the grid\n      if (gridOptions && gridOptions.presets) {\n        // Filters \"presets\"\n        if (backendApiService.updateFilters && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {\n          backendApiService.updateFilters(gridOptions.presets.filters, true);\n        }\n        // Sorters \"presets\"\n        if (backendApiService.updateSorters && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {\n          // when using multi-column sort, we can have multiple but on single sort then only grab the first sort provided\n          const sortColumns = this.gridOptions.multiColumnSort ? gridOptions.presets.sorters : gridOptions.presets.sorters.slice(0, 1);\n          backendApiService.updateSorters(undefined, sortColumns);\n        }\n        // Pagination \"presets\"\n        if (backendApiService.updatePagination && gridOptions.presets.pagination) {\n          const { pageNumber, pageSize } = gridOptions.presets.pagination;\n          backendApiService.updatePagination(pageNumber, pageSize);\n        }\n      } else {\n        const columnFilters = this.filterService.getColumnFilters();\n        if (columnFilters && backendApiService.updateFilters) {\n          backendApiService.updateFilters(columnFilters, false);\n        }\n      }\n\n      // execute onInit command when necessary\n      if (backendApi && backendApiService && (backendApi.onInit || isExecuteCommandOnInit)) {\n        const query = (typeof backendApiService.buildQuery === 'function') ? backendApiService.buildQuery() : '';\n        const process = (isExecuteCommandOnInit) ? (backendApi.process && backendApi.process(query) || null) : (backendApi.onInit && backendApi.onInit(query) || null);\n\n        // wrap this inside a setTimeout to avoid timing issue since the gridOptions needs to be ready before running this onInit\n        setTimeout(() => {\n          const backendUtilityService = this.backendUtilityService as BackendUtilityService;\n\n          // keep start time & end timestamps & return it after process execution\n          const startTime = new Date();\n\n          // run any pre-process, if defined, for example a spinner\n          if (backendApi.preProcess) {\n            backendApi.preProcess();\n          }\n\n          // the processes can be a Promise (like Http)\n          const totalItems = this.gridOptions?.pagination?.totalItems ?? 0;\n          if (process instanceof Promise) {\n            process\n              .then((processResult: any) => backendUtilityService.executeBackendProcessesCallback(startTime, processResult, backendApi, totalItems))\n              .catch((error) => backendUtilityService.onBackendError(error, backendApi));\n          } else if (process && this.rxjs?.isObservable(process)) {\n            this.subscriptions.push(\n              (process as Observable<any>).subscribe({\n                next: (processResult: any) => backendUtilityService.executeBackendProcessesCallback(startTime, processResult, backendApi, totalItems),\n                error: (error: any) => backendUtilityService.onBackendError(error, backendApi)\n              })\n            );\n          }\n        });\n      }\n    }\n  }\n\n  private bindResizeHook(grid: SlickGrid, options: GridOption) {\n    if ((options.autoFitColumnsOnFirstLoad && options.autosizeColumnsByCellContentOnFirstLoad) || (options.enableAutoSizeColumns && options.enableAutoResizeColumnsByCellContent)) {\n      throw new Error(`[Angular-Slickgrid] You cannot enable both autosize/fit viewport & resize by content, you must choose which resize technique to use. You can enable these 2 options (\"autoFitColumnsOnFirstLoad\" and \"enableAutoSizeColumns\") OR these other 2 options (\"autosizeColumnsByCellContentOnFirstLoad\" and \"enableAutoResizeColumnsByCellContent\").`);\n    }\n\n    // expand/autofit columns on first page load\n    if (grid && options.autoFitColumnsOnFirstLoad && options.enableAutoSizeColumns) {\n      grid.autosizeColumns();\n    }\n\n    // auto-resize grid on browser resize\n    if (options.gridHeight || options.gridWidth) {\n      this.resizerService.resizeGrid(0, { height: options.gridHeight, width: options.gridWidth });\n    } else {\n      this.resizerService.resizeGrid();\n    }\n    if (options.enableAutoResize) {\n      if (grid && options.autoFitColumnsOnFirstLoad && options.enableAutoSizeColumns) {\n        grid.autosizeColumns();\n      }\n    }\n  }\n\n  private executeAfterDataviewCreated(_grid: SlickGrid, gridOptions: GridOption) {\n    // if user entered some Sort \"presets\", we need to reflect them all in the DOM\n    if (gridOptions.enableSorting) {\n      if (gridOptions.presets && Array.isArray(gridOptions.presets.sorters)) {\n        // when using multi-column sort, we can have multiple but on single sort then only grab the first sort provided\n        const sortColumns = this.gridOptions.multiColumnSort ? gridOptions.presets.sorters : gridOptions.presets.sorters.slice(0, 1);\n        this.sortService.loadGridSorters(sortColumns);\n      }\n    }\n  }\n\n  /** When data changes in the DataView, we'll refresh the metrics and/or display a warning if the dataset is empty */\n  private handleOnItemCountChanged(currentPageRowItemCount: number, totalItemCount: number) {\n    this._currentDatasetLength = totalItemCount;\n    this.metrics = {\n      startTime: new Date(),\n      endTime: new Date(),\n      itemCount: currentPageRowItemCount,\n      totalItemCount\n    };\n    // if custom footer is enabled, then we'll update its metrics\n    if (this.slickFooter) {\n      this.slickFooter.metrics = this.metrics;\n    }\n\n    // when using local (in-memory) dataset, we'll display a warning message when filtered data is empty\n    if (this._isLocalGrid && this.gridOptions?.enableEmptyDataWarningMessage) {\n      this.displayEmptyDataWarning(currentPageRowItemCount === 0);\n    }\n  }\n\n  private initializePaginationService(paginationOptions: Pagination) {\n    if (this.gridOptions) {\n      this.paginationData = {\n        gridOptions: this.gridOptions,\n        paginationService: this.paginationService,\n      };\n      this.paginationService.totalItems = this.totalItems;\n      this.paginationService.init(this.slickGrid, paginationOptions, this.backendServiceApi);\n      this.subscriptions.push(\n        this._eventPubSubService.subscribe('onPaginationChanged', (paginationChanges: ServicePagination) => {\n          this.paginationChanged(paginationChanges);\n        }),\n        this._eventPubSubService.subscribe('onPaginationVisibilityChanged', (visibility: { visible: boolean; }) => {\n          this.showPagination = visibility?.visible ?? false;\n          if (this.gridOptions?.backendServiceApi) {\n            this.backendUtilityService?.refreshBackendDataset(this.gridOptions);\n          }\n          this.renderPagination(this.showPagination);\n        })\n      );\n      // also initialize (render) the pagination component\n      this.renderPagination();\n      this._isPaginationInitialized = true;\n    }\n    this.cd.detectChanges();\n  }\n\n  /** Load the Editor Collection asynchronously and replace the \"collection\" property when Observable resolves */\n  private loadEditorCollectionAsync(column: Column) {\n    const collectionAsync = column && column.editor && (column.editor as ColumnEditor).collectionAsync;\n    if (collectionAsync instanceof Observable) {\n      this.subscriptions.push(\n        collectionAsync.subscribe((resolvedCollection) => this.updateEditorCollection(column, resolvedCollection))\n      );\n    } else if (collectionAsync instanceof Promise) {\n      // wait for the \"collectionAsync\", once resolved we will save it into the \"collection\"\n      // the collectionAsync can be of 3 types HttpClient, HttpFetch or a Promise\n      collectionAsync.then((response: any | any[]) => {\n        if (Array.isArray(response)) {\n          this.updateEditorCollection(column, response); // from Promise\n        }\n      });\n    }\n  }\n\n  protected insertDynamicPresetColumns(columnId: string, gridPresetColumns: Column[]) {\n    if (this._columnDefinitions) {\n      const columnPosition = this._columnDefinitions.findIndex(c => c.id === columnId);\n      if (columnPosition >= 0) {\n        const dynColumn = this._columnDefinitions[columnPosition];\n        if (dynColumn?.id === columnId && !gridPresetColumns.some(c => c.id === columnId)) {\n          columnPosition > 0\n            ? gridPresetColumns.splice(columnPosition, 0, dynColumn)\n            : gridPresetColumns.unshift(dynColumn);\n        }\n      }\n    }\n  }\n\n  /** Load any possible Columns Grid Presets */\n  private loadColumnPresetsWhenDatasetInitialized() {\n    // if user entered some Columns \"presets\", we need to reflect them all in the grid\n    if (this.gridOptions.presets && Array.isArray(this.gridOptions.presets.columns) && this.gridOptions.presets.columns.length > 0) {\n      const gridPresetColumns: Column[] = this.gridStateService.getAssociatedGridColumns(this.slickGrid, this.gridOptions.presets.columns);\n      if (gridPresetColumns && Array.isArray(gridPresetColumns) && gridPresetColumns.length > 0 && Array.isArray(this._columnDefinitions)) {\n        // make sure that the dynamic columns are included in presets (1.Row Move, 2. Row Selection, 3. Row Detail)\n        if (this.gridOptions.enableRowMoveManager) {\n          const rmmColId = this.gridOptions?.rowMoveManager?.columnId ?? '_move';\n          this.insertDynamicPresetColumns(rmmColId, gridPresetColumns);\n        }\n        if (this.gridOptions.enableCheckboxSelector) {\n          const chkColId = this.gridOptions?.checkboxSelector?.columnId ?? '_checkbox_selector';\n          this.insertDynamicPresetColumns(chkColId, gridPresetColumns);\n        }\n        if (this.gridOptions.enableRowDetailView) {\n          const rdvColId = this.gridOptions?.rowDetailView?.columnId ?? '_detail_selector';\n          this.insertDynamicPresetColumns(rdvColId, gridPresetColumns);\n        }\n\n        // keep copy the original optional `width` properties optionally provided by the user.\n        // We will use this when doing a resize by cell content, if user provided a `width` it won't override it.\n        gridPresetColumns.forEach(col => col.originalWidth = col.width);\n\n        // finally set the new presets columns (including checkbox selector if need be)\n        this.slickGrid.setColumns(gridPresetColumns);\n        this.sharedService.visibleColumns = gridPresetColumns;\n      }\n    }\n  }\n\n  /** Load any possible Filters Grid Presets */\n  private loadFilterPresetsWhenDatasetInitialized() {\n    if (this.gridOptions && !this.customDataView) {\n      // if user entered some Filter \"presets\", we need to reflect them all in the DOM\n      // also note that a presets of Tree Data Toggling will also call this method because Tree Data toggling does work with data filtering\n      // (collapsing a parent will basically use Filter for hidding (aka collapsing) away the child underneat it)\n      if (this.gridOptions.presets && (Array.isArray(this.gridOptions.presets.filters) || Array.isArray(this.gridOptions.presets?.treeData?.toggledItems))) {\n        this.filterService.populateColumnFilterSearchTermPresets(this.gridOptions.presets?.filters || []);\n      }\n    }\n  }\n\n  /**\n   * local grid, check if we need to show the Pagination\n   * if so then also check if there's any presets and finally initialize the PaginationService\n   * a local grid with Pagination presets will potentially have a different total of items, we'll need to get it from the DataView and update our total\n   */\n  private loadLocalGridPagination(dataset?: any[]) {\n    if (this.gridOptions && this._paginationOptions) {\n      this.totalItems = Array.isArray(dataset) ? dataset.length : 0;\n      if (this._paginationOptions && this.dataView?.getPagingInfo) {\n        const slickPagingInfo = this.dataView.getPagingInfo();\n        if (slickPagingInfo?.hasOwnProperty('totalRows') && this._paginationOptions.totalItems !== slickPagingInfo.totalRows) {\n          this.totalItems = slickPagingInfo.totalRows || 0;\n        }\n      }\n      this._paginationOptions.totalItems = this.totalItems;\n      const paginationOptions = this.setPaginationOptionsWhenPresetDefined(this.gridOptions, this._paginationOptions);\n      this.initializePaginationService(paginationOptions);\n    }\n  }\n\n  /** Load any Row Selections into the DataView that were presets by the user */\n  private loadRowSelectionPresetWhenExists() {\n    // if user entered some Row Selections \"presets\"\n    const presets = this.gridOptions?.presets;\n    const enableRowSelection = this.gridOptions && (this.gridOptions.enableCheckboxSelector || this.gridOptions.enableRowSelection);\n    if (enableRowSelection && this.slickGrid?.getSelectionModel() && presets?.rowSelection && (Array.isArray(presets.rowSelection.gridRowIndexes) || Array.isArray(presets.rowSelection.dataContextIds))) {\n      let dataContextIds = presets.rowSelection.dataContextIds;\n      let gridRowIndexes = presets.rowSelection.gridRowIndexes;\n\n      // maps the IDs to the Grid Rows and vice versa, the \"dataContextIds\" has precedence over the other\n      if (Array.isArray(dataContextIds) && dataContextIds.length > 0) {\n        gridRowIndexes = this.dataView.mapIdsToRows(dataContextIds) || [];\n      } else if (Array.isArray(gridRowIndexes) && gridRowIndexes.length > 0) {\n        dataContextIds = this.dataView.mapRowsToIds(gridRowIndexes) || [];\n      }\n\n      // apply row selection when defined as grid presets\n      if (this.slickGrid && Array.isArray(gridRowIndexes)) {\n        this.slickGrid.setSelectedRows(gridRowIndexes);\n        this.dataView!.setSelectedIds(dataContextIds || [], {\n          isRowBeingAdded: true,\n          shouldTriggerEvent: false, // do not trigger when presetting the grid\n          applyRowSelectionToGrid: true\n        });\n      }\n    }\n  }\n\n  private mergeGridOptions(gridOptions: GridOption): GridOption {\n    gridOptions.gridId = this.gridId;\n    gridOptions.gridContainerId = `slickGridContainer-${this.gridId}`;\n\n    // if we have a backendServiceApi and the enablePagination is undefined, we'll assume that we do want to see it, else get that defined value\n    gridOptions.enablePagination = ((gridOptions.backendServiceApi && gridOptions.enablePagination === undefined) ? true : gridOptions.enablePagination) || false;\n\n    // use jquery extend to deep merge & copy to avoid immutable properties being changed in GlobalGridOptions after a route change\n    const options = $.extend(true, {}, GlobalGridOptions, this.forRootConfig, gridOptions) as GridOption;\n\n    // using jQuery extend to do a deep clone has an unwanted side on objects and pageSizes but ES6 spread has other worst side effects\n    // so we will just overwrite the pageSizes when needed, this is the only one causing issues so far.\n    // jQuery wrote this on their docs:: On a deep extend, Object and Array are extended, but object wrappers on primitive types such as String, Boolean, and Number are not.\n    if (options?.pagination && (gridOptions.enablePagination || gridOptions.backendServiceApi) && (this.forRootConfig.pagination || gridOptions.pagination)) {\n      options.pagination.pageSize = gridOptions.pagination?.pageSize ?? this.forRootConfig.pagination?.pageSize ?? GlobalGridOptions.pagination!.pageSize;\n      options.pagination.pageSizes = gridOptions.pagination?.pageSizes ?? this.forRootConfig.pagination?.pageSizes ?? GlobalGridOptions.pagination!.pageSizes;\n    }\n\n    // also make sure to show the header row if user have enabled filtering\n    this._hideHeaderRowAfterPageLoad = (options.showHeaderRow === false);\n    if (options.enableFiltering && !options.showHeaderRow) {\n      options.showHeaderRow = options.enableFiltering;\n    }\n\n    // when we use Pagination on Local Grid, it doesn't seem to work without enableFiltering\n    // so we'll enable the filtering but we'll keep the header row hidden\n    if (options && !options.enableFiltering && options.enablePagination && this._isLocalGrid) {\n      options.enableFiltering = true;\n      options.showHeaderRow = false;\n      this._hideHeaderRowAfterPageLoad = true;\n      if (this.sharedService) {\n        this.sharedService.hideHeaderRowAfterPageLoad = true;\n      }\n    }\n\n    return options;\n  }\n\n  /** Pre-Register any Resource that don't require SlickGrid to be instantiated (for example RxJS Resource & RowDetail) */\n  private preRegisterResources() {\n    this._registeredResources = this.gridOptions.registerExternalResources || [];\n\n    // Angular-Slickgrid requires RxJS, so we'll register it as the first resource\n    this.registerRxJsResource(new RxJsResource() as RxJsFacade);\n\n    if (this.gridOptions.enableRowDetailView) {\n      this.slickRowDetailView = new SlickRowDetailView(this.angularUtilService, this.appRef, this._eventPubSubService, this.elm.nativeElement, this.rxjs);\n      this.slickRowDetailView.create(this.columnDefinitions, this.gridOptions);\n      this._registeredResources.push(this.slickRowDetailView);\n      this.extensionService.addExtensionToList(ExtensionName.rowDetailView, { name: ExtensionName.rowDetailView, instance: this.slickRowDetailView });\n    }\n  }\n\n  private registerResources() {\n    // at this point, we consider all the registered services as external services, anything else registered afterward aren't external\n    if (Array.isArray(this._registeredResources)) {\n      this.sharedService.externalRegisteredResources = this._registeredResources;\n    }\n\n    // push all other Services that we want to be registered\n    this._registeredResources.push(this.gridService, this.gridStateService);\n\n    // when using Grouping/DraggableGrouping/Colspan register its Service\n    if (this.gridOptions.createPreHeaderPanel && !this.gridOptions.enableDraggableGrouping) {\n      this._registeredResources.push(this.groupingService);\n    }\n\n    // when using Tree Data View, register its Service\n    if (this.gridOptions.enableTreeData) {\n      this._registeredResources.push(this.treeDataService);\n    }\n\n    // when user enables translation, we need to translate Headers on first pass & subsequently in the bindDifferentHooks\n    if (this.gridOptions.enableTranslate) {\n      this.extensionService.translateColumnHeaders();\n    }\n\n    // also initialize (render) the empty warning component\n    this.slickEmptyWarning = new SlickEmptyWarningComponent();\n    this._registeredResources.push(this.slickEmptyWarning);\n\n    // bind & initialize all Components/Services that were tagged as enabled\n    // register all services by executing their init method and providing them with the Grid object\n    if (Array.isArray(this._registeredResources)) {\n      for (const resource of this._registeredResources) {\n        if (this.slickGrid && typeof resource.init === 'function') {\n          resource.init(this.slickGrid, this.containerService);\n        }\n      }\n    }\n  }\n\n  /** Register the RxJS Resource in all necessary services which uses */\n  private registerRxJsResource(resource: RxJsFacade) {\n    this.rxjs = resource;\n    this.backendUtilityService.addRxJsResource(this.rxjs);\n    this.filterFactory.addRxJsResource(this.rxjs);\n    this.filterService.addRxJsResource(this.rxjs);\n    this.sortService.addRxJsResource(this.rxjs);\n    this.paginationService.addRxJsResource(this.rxjs);\n    this.containerService.registerInstance('RxJsResource', this.rxjs);\n  }\n\n  /**\n   * Render (or dispose) the Pagination Component, user can optionally provide False (to not show it) which will in term dispose of the Pagination,\n   * also while disposing we can choose to omit the disposable of the Pagination Service (if we are simply toggling the Pagination, we want to keep the Service alive)\n   * @param {Boolean} showPagination - show (new render) or not (dispose) the Pagination\n   * @param {Boolean} shouldDisposePaginationService - when disposing the Pagination, do we also want to dispose of the Pagination Service? (defaults to True)\n   */\n  private renderPagination(showPagination = true) {\n    if (this.gridOptions?.enablePagination && !this._isPaginationInitialized && showPagination) {\n      this.slickPagination = new SlickPaginationComponent(this.paginationService, this._eventPubSubService, this.sharedService, this.translaterService);\n      this.slickPagination.renderPagination(this.gridContainerElement as HTMLElement);\n      this._isPaginationInitialized = true;\n    } else if (!showPagination) {\n      if (this.slickPagination) {\n        this.slickPagination.dispose();\n      }\n      this._isPaginationInitialized = false;\n    }\n  }\n\n  /**\n   * Takes a flat dataset with parent/child relationship, sort it (via its tree structure) and return the sorted flat array\n   * @param {Array<Object>} flatDatasetInput - flat dataset input\n   * @param {Boolean} forceGridRefresh - optionally force a full grid refresh\n   * @returns {Array<Object>} sort flat parent/child dataset\n   */\n  private sortTreeDataset<T>(flatDatasetInput: T[], forceGridRefresh = false): T[] {\n    const prevDatasetLn = this._currentDatasetLength;\n    let sortedDatasetResult;\n    let flatDatasetOutput: any[] = [];\n\n    // if the hierarchical dataset was already initialized then no need to re-convert it, we can use it directly from the shared service ref\n    if (this._isDatasetHierarchicalInitialized && this.datasetHierarchical) {\n      sortedDatasetResult = this.treeDataService.sortHierarchicalDataset(this.datasetHierarchical);\n      flatDatasetOutput = sortedDatasetResult.flat;\n    } else if (Array.isArray(flatDatasetInput) && flatDatasetInput.length > 0) {\n      if (this.gridOptions?.treeDataOptions?.initialSort) {\n        // else we need to first convert the flat dataset to a hierarchical dataset and then sort\n        sortedDatasetResult = this.treeDataService.convertFlatParentChildToTreeDatasetAndSort(flatDatasetInput, this._columnDefinitions, this.gridOptions);\n        this.sharedService.hierarchicalDataset = sortedDatasetResult.hierarchical;\n        flatDatasetOutput = sortedDatasetResult.flat;\n      } else {\n        // else we assume that the user provided an array that is already sorted (user's responsability)\n        // and so we can simply convert the array to a tree structure and we're done, no need to sort\n        this.sharedService.hierarchicalDataset = this.treeDataService.convertFlatParentChildToTreeDataset(flatDatasetInput, this.gridOptions);\n        flatDatasetOutput = flatDatasetInput || [];\n      }\n    }\n\n    // if we add/remove item(s) from the dataset, we need to also refresh our tree data filters\n    if (flatDatasetInput.length > 0 && (forceGridRefresh || flatDatasetInput.length !== prevDatasetLn)) {\n      this.filterService.refreshTreeDataFilters(flatDatasetOutput);\n    }\n\n    return flatDatasetOutput;\n  }\n\n  /**\n   * For convenience to the user, we provide the property \"editor\" as an Angular-Slickgrid editor complex object\n   * however \"editor\" is used internally by SlickGrid for it's own Editor Factory\n   * so in our lib we will swap \"editor\" and copy it into a new property called \"internalColumnEditor\"\n   * then take back \"editor.model\" and make it the new \"editor\" so that SlickGrid Editor Factory still works\n   */\n  private swapInternalEditorToSlickGridFactoryEditor(columnDefinitions: Column[]) {\n    if (columnDefinitions.some(col => `${col.id}`.includes('.'))) {\n      console.error('[Angular-Slickgrid] Make sure that none of your Column Definition \"id\" property includes a dot in its name because that will cause some problems with the Editors. For example if your column definition \"field\" property is \"user.firstName\" then use \"firstName\" as the column \"id\".');\n    }\n\n    return columnDefinitions.map((column: Column | any) => {\n      // on every Editor that have a \"collectionAsync\", resolve the data and assign it to the \"collection\" property\n      if (column?.editor?.collectionAsync) {\n        this.loadEditorCollectionAsync(column);\n      }\n      return { ...column, editor: column.editor?.model, internalColumnEditor: { ...column.editor } };\n    });\n  }\n\n  private translateColumnHeaderTitleKeys() {\n    // translate all columns (including hidden columns)\n    this.extensionUtility.translateItems(this.sharedService.allColumns, 'nameKey', 'name');\n  }\n\n  private translateColumnGroupKeys() {\n    // translate all column groups (including hidden columns)\n    this.extensionUtility.translateItems(this.sharedService.allColumns, 'columnGroupKey', 'columnGroup');\n  }\n\n  /**\n   * Update the \"internalColumnEditor.collection\" property.\n   * Since this is called after the async call resolves, the pointer will not be the same as the \"column\" argument passed.\n   * Once we found the new pointer, we will reassign the \"editor\" and \"collection\" to the \"internalColumnEditor\" so it has newest collection\n   */\n  private updateEditorCollection<T = any>(column: Column<T>, newCollection: T[]) {\n    (column.editor as ColumnEditor).collection = newCollection;\n    (column.editor as ColumnEditor).disabled = false;\n\n    // find the new column reference pointer & re-assign the new editor to the internalColumnEditor\n    if (Array.isArray(this.columnDefinitions)) {\n      const columnRef = this.columnDefinitions.find((col: Column) => col.id === column.id);\n      if (columnRef) {\n        columnRef.internalColumnEditor = column.editor as ColumnEditor;\n      }\n    }\n\n    // get current Editor, remove it from the DOM then re-enable it and re-render it with the new collection.\n    const currentEditor = this.slickGrid.getCellEditor() as AutocompleterEditor | SelectEditor;\n    if (currentEditor?.disable && currentEditor?.renderDomElement) {\n      currentEditor.destroy();\n      currentEditor.disable(false);\n      currentEditor.renderDomElement(newCollection);\n    }\n  }\n}\n","<div id=\"slickGridContainer-{{gridId}}\" class=\"gridPane\">\n  <div attr.id='{{gridId}}' class=\"slickgrid-container\" style=\"width: 100%\">\n  </div>\n</div>","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { AngularSlickgridComponent } from './../components/angular-slickgrid.component';\nimport { GridOption } from './../models/gridOption.interface';\nimport { AngularUtilService } from '../services/angularUtil.service';\nimport { ContainerService } from '../services/container.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TranslateModule\n  ],\n  declarations: [\n    AngularSlickgridComponent,\n  ],\n  exports: [\n    AngularSlickgridComponent,\n  ]\n})\nexport class AngularSlickgridModule {\n  static forRoot(config: GridOption = {}): ModuleWithProviders<AngularSlickgridModule> {\n    return {\n      ngModule: AngularSlickgridModule,\n      providers: [\n        { provide: 'config', useValue: config },\n        { provide: 'externalService', useValue: null },\n        AngularUtilService,\n        ContainerService,\n      ]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["UniversalSlickRowDetailView","SlickgridConfig","i1.AngularUtilService","i2.ContainerService","i3","i4.TranslaterService"],"mappings":"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"}