"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlickCellRangeDecorator = void 0;
const utils_1 = require("@slickgrid-universal/utils");
const domUtilities_1 = require("../services/domUtilities");
/**
 * Displays an overlay on top of a given cell range.
 * TODO:
 * Currently, it blocks mouse events to DOM nodes behind it.
 * Use FF and WebKit-specific "pointer-events" CSS style, or some kind of event forwarding.
 * Could also construct the borders separately using 4 individual DIVs.
 */
class SlickCellRangeDecorator {
    constructor(grid, options) {
        this._defaults = {
            selectionCssClass: 'slick-range-decorator',
            selectionCss: {
                border: '2px dashed red',
                zIndex: '9999',
            },
            offset: { top: -1, left: -1, height: -2, width: -2 }
        };
        this.pluginName = 'CellRangeDecorator';
        this._addonOptions = (0, utils_1.deepMerge)(this._defaults, options);
        this._grid = grid;
    }
    get addonOptions() {
        return this._addonOptions;
    }
    get addonElement() {
        return this._elem;
    }
    /** Dispose the plugin. */
    dispose() {
        this.hide();
    }
    hide() {
        var _a;
        (_a = this._elem) === null || _a === void 0 ? void 0 : _a.remove();
        this._elem = null;
    }
    show(range) {
        var _a, _b, _c, _d, _e;
        if (!this._elem) {
            this._elem = (0, domUtilities_1.createDomElement)('div', { className: this._addonOptions.selectionCssClass });
            Object.keys(this._addonOptions.selectionCss).forEach((cssStyleKey) => {
                this._elem.style[cssStyleKey] = this._addonOptions.selectionCss[cssStyleKey];
            });
            this._elem.style.position = 'absolute';
            (_b = (_a = this._grid) === null || _a === void 0 ? void 0 : _a.getActiveCanvasNode()) === null || _b === void 0 ? void 0 : _b.appendChild(this._elem);
        }
        const from = (_c = this._grid) === null || _c === void 0 ? void 0 : _c.getCellNodeBox(range.fromRow, range.fromCell);
        const to = (_d = this._grid) === null || _d === void 0 ? void 0 : _d.getCellNodeBox(range.toRow, range.toCell);
        if (from && to && ((_e = this._addonOptions) === null || _e === void 0 ? void 0 : _e.offset)) {
            this._elem.style.top = `${from.top + this._addonOptions.offset.top}px`;
            this._elem.style.left = `${from.left + this._addonOptions.offset.left}px`;
            this._elem.style.height = `${to.bottom - from.top + this._addonOptions.offset.height}px`;
            this._elem.style.width = `${to.right - from.left + this._addonOptions.offset.width}px`;
        }
        return this._elem;
    }
}
exports.SlickCellRangeDecorator = SlickCellRangeDecorator;
//# sourceMappingURL=slickCellRangeDecorator.js.map