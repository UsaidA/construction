import 'multiple-select-modified';
import * as BackendUtilities from './services/backendUtility.service';
import * as ServiceUtilities from './services/utilities';
import * as Utils from '@slickgrid-universal/utils';
export * from '@slickgrid-universal/utils';
export { BasePubSubService as PubSubService, EventNamingStyle, EventSubscription, PubSubEvent } from '@slickgrid-universal/event-pub-sub';
export * from './constants';
export * from './global-grid-options';
export * from './enums/index';
export * from './interfaces/index';
export * from './aggregators/index';
export * from './aggregators/aggregators.index';
export * from './editors/index';
export * from './editors/editors.index';
export * from './extensions/index';
export * from './filter-conditions/index';
export * from './filter-conditions/filterConditions.index';
export * from './filters/index';
export * from './filters/filters.index';
export * from './filters/filterFactory';
export * from './formatters/index';
export * from './formatters/formatters.index';
export * from './grouping-formatters/index';
export * from './grouping-formatters/groupingFormatters.index';
export * from './sortComparers/index';
export * from './sortComparers/sortComparers.index';
export * from './services/index';
export { Enums } from './enums/enums.index';
declare const Utilities: {
    deepAssign: typeof Utils.deepMerge;
    addToArrayWhenNotExists<T = any>(inputArray: T[], inputItem: T, itemIdPropName?: string | undefined): void;
    addWhiteSpaces(nbSpaces: number, spaceChar?: string | undefined): string;
    arrayRemoveItemByIndex<T_1>(array: T_1[], index: number): T_1[];
    deepCopy(objectOrArray: any): any;
    deepMerge(target: any, ...sources: any[]): any;
    objectAssignAndExtend(target: any, ...sources: any): any;
    emptyObject(obj: any): any;
    isEmptyObject(obj: any): boolean;
    isObject(item: any): boolean;
    isPrimmitive(val: any): boolean;
    hasData(value: any): boolean;
    isNumber(value: any, strict?: boolean | undefined): boolean;
    isObjectEmpty(obj: unknown): boolean;
    parseBoolean(input: any): boolean;
    removeAccentFromText(text: string, shouldLowerCase?: boolean | undefined): string;
    setDeepValue<T_2 = unknown>(obj: T_2, path: string | string[], value: any): void;
    titleCase(inputStr: string, shouldTitleCaseEveryWords?: boolean | undefined): string;
    toCamelCase(inputStr: string): string;
    toKebabCase(inputStr: string): string;
    toSentenceCase(inputStr: string): string;
    toSnakeCase(inputStr: string): string;
    uniqueArray<T_3 = any>(arr: T_3[]): T_3[];
    uniqueObjectArray(arr: any[], propertyName?: string | undefined): any[];
    sortByFieldType(fieldType: "string" | "number" | "boolean" | "object" | "unknown" | "integer" | "float" | "date" | "dateIso" | "dateUtc" | "dateTime" | "dateTimeIso" | "dateTimeIsoAmPm" | "dateTimeIsoAM_PM" | "dateTimeShortIso" | "dateEuro" | "dateEuroShort" | "dateTimeShortEuro" | "dateTimeEuro" | "dateTimeEuroAmPm" | "dateTimeEuroAM_PM" | "dateTimeEuroShort" | "dateTimeEuroShortAmPm" | "dateTimeEuroShortAM_PM" | "dateUs" | "dateUsShort" | "dateTimeShortUs" | "dateTimeUs" | "dateTimeUsAmPm" | "dateTimeUsAM_PM" | "dateTimeUsShort" | "dateTimeUsShortAmPm" | "dateTimeUsShortAM_PM" | "password" | "text" | "readonly", value1: any, value2: any, sortDirection: number, sortColumn?: import("./interfaces/column.interface").Column<any> | undefined, gridOptions?: import("./interfaces/gridOption.interface").GridOption | undefined): number;
    cancellablePromise<T_4 = any>(inputPromise: Promise<T_4>): import("./interfaces/cancellablePromiseWrapper.interface").CancellablePromiseWrapper<T_4>;
    castObservableToPromise<T_5>(rxjs: import("./services/rxjsFacade").RxJsFacade, input: Promise<T_5> | import("./services/rxjsFacade").Observable<T_5> | import("./services/rxjsFacade").Subject<T_5>, fromServiceName?: string): Promise<T_5>;
    addTreeLevelByMutation<T_6>(treeArray: T_6[], options: {
        childrenPropName: string;
        levelPropName: string;
    }, treeLevel?: number): void;
    flattenToParentChildArray<T_7>(treeArray: T_7[], options?: {
        parentPropName?: string | undefined;
        childrenPropName?: string | undefined;
        hasChildrenPropName?: string | undefined;
        identifierPropName?: string | undefined;
        shouldAddTreeLevelNumber?: boolean | undefined;
        levelPropName?: string | undefined;
    } | undefined): Omit<T_7, number | typeof Symbol.iterator | "charAt" | "charCodeAt" | "concat" | "indexOf" | "lastIndexOf" | "localeCompare" | "match" | "replace" | "search" | "slice" | "split" | "substring" | "toLowerCase" | "toLocaleLowerCase" | "toUpperCase" | "toLocaleUpperCase" | "trim" | "length" | "substr" | "codePointAt" | "includes" | "endsWith" | "normalize" | "repeat" | "startsWith" | "anchor" | "big" | "blink" | "bold" | "fixed" | "fontcolor" | "fontsize" | "italics" | "link" | "small" | "strike" | "sub" | "sup" | "padStart" | "padEnd" | "trimEnd" | "trimStart" | "trimLeft" | "trimRight" | "matchAll" | "at" | "toString" | "toLocaleString" | "valueOf">[];
    unflattenParentChildArrayToTree<P, T_8 extends P & {
        [childrenPropName: string]: P[];
    }>(flatArray: P[], options?: {
        childrenPropName?: string | undefined;
        collapsedPropName?: string | undefined;
        identifierPropName?: string | undefined;
        levelPropName?: string | undefined;
        parentPropName?: string | undefined;
        initiallyCollapsed?: boolean | undefined;
    } | undefined): T_8[];
    findItemInTreeStructure<T_9 = any>(treeArray: T_9[], predicate: (item: T_9) => boolean, childrenPropertyName: string): T_9 | undefined;
    decimalFormatted(input: string | number, minDecimal?: number | undefined, maxDecimal?: number | undefined, decimalSeparator?: "." | ",", thousandSeparator?: "" | "." | "," | "_" | " "): string;
    formatNumber(input: string | number, minDecimal?: number | undefined, maxDecimal?: number | undefined, wrapNegativeNumberInBraquets?: boolean | undefined, symbolPrefix?: string, symbolSuffix?: string, decimalSeparator?: "." | ",", thousandSeparator?: "" | "." | "," | "_" | " "): string;
    getCellValueFromQueryFieldGetter(columnDef: import("./interfaces/column.interface").Column<any>, dataContext: any, defaultValue: any): string;
    getDescendantProperty<T_10 = any>(object: T_10, path: string | undefined): any;
    getTranslationPrefix(gridOptions?: import("./interfaces/gridOption.interface").GridOption | undefined): string;
    getColumnFieldType(columnDef: import("./interfaces/column.interface").Column<any>): "string" | "number" | "boolean" | "object" | "unknown" | "integer" | "float" | "date" | "dateIso" | "dateUtc" | "dateTime" | "dateTimeIso" | "dateTimeIsoAmPm" | "dateTimeIsoAM_PM" | "dateTimeShortIso" | "dateEuro" | "dateEuroShort" | "dateTimeShortEuro" | "dateTimeEuro" | "dateTimeEuroAmPm" | "dateTimeEuroAM_PM" | "dateTimeEuroShort" | "dateTimeEuroShortAmPm" | "dateTimeEuroShortAM_PM" | "dateUs" | "dateUsShort" | "dateTimeShortUs" | "dateTimeUs" | "dateTimeUsAmPm" | "dateTimeUsAM_PM" | "dateTimeUsShort" | "dateTimeUsShortAmPm" | "dateTimeUsShortAM_PM" | "password" | "text" | "readonly";
    isColumnDateType(fieldType: "string" | "number" | "boolean" | "object" | "unknown" | "integer" | "float" | "date" | "dateIso" | "dateUtc" | "dateTime" | "dateTimeIso" | "dateTimeIsoAmPm" | "dateTimeIsoAM_PM" | "dateTimeShortIso" | "dateEuro" | "dateEuroShort" | "dateTimeShortEuro" | "dateTimeEuro" | "dateTimeEuroAmPm" | "dateTimeEuroAM_PM" | "dateTimeEuroShort" | "dateTimeEuroShortAmPm" | "dateTimeEuroShortAM_PM" | "dateUs" | "dateUsShort" | "dateTimeShortUs" | "dateTimeUs" | "dateTimeUsAmPm" | "dateTimeUsAM_PM" | "dateTimeUsShort" | "dateTimeUsShortAmPm" | "dateTimeUsShortAM_PM" | "password" | "text" | "readonly"): boolean;
    mapMomentDateFormatWithFieldType(fieldType: "string" | "number" | "boolean" | "object" | "unknown" | "integer" | "float" | "date" | "dateIso" | "dateUtc" | "dateTime" | "dateTimeIso" | "dateTimeIsoAmPm" | "dateTimeIsoAM_PM" | "dateTimeShortIso" | "dateEuro" | "dateEuroShort" | "dateTimeShortEuro" | "dateTimeEuro" | "dateTimeEuroAmPm" | "dateTimeEuroAM_PM" | "dateTimeEuroShort" | "dateTimeEuroShortAmPm" | "dateTimeEuroShortAM_PM" | "dateUs" | "dateUsShort" | "dateTimeShortUs" | "dateTimeUs" | "dateTimeUsAmPm" | "dateTimeUsAM_PM" | "dateTimeUsShort" | "dateTimeUsShortAmPm" | "dateTimeUsShortAM_PM" | "password" | "text" | "readonly"): string;
    mapFlatpickrDateFormatWithFieldType(fieldType: "string" | "number" | "boolean" | "object" | "unknown" | "integer" | "float" | "date" | "dateIso" | "dateUtc" | "dateTime" | "dateTimeIso" | "dateTimeIsoAmPm" | "dateTimeIsoAM_PM" | "dateTimeShortIso" | "dateEuro" | "dateEuroShort" | "dateTimeShortEuro" | "dateTimeEuro" | "dateTimeEuroAmPm" | "dateTimeEuroAM_PM" | "dateTimeEuroShort" | "dateTimeEuroShortAmPm" | "dateTimeEuroShortAM_PM" | "dateUs" | "dateUsShort" | "dateTimeShortUs" | "dateTimeUs" | "dateTimeUsAmPm" | "dateTimeUsAM_PM" | "dateTimeUsShort" | "dateTimeUsShortAmPm" | "dateTimeUsShortAM_PM" | "password" | "text" | "readonly"): string;
    mapOperatorType(operator: import("./enums/operatorType.enum").OperatorType | import("./enums/operatorString.type").OperatorString): import("./enums/operatorType.enum").OperatorType;
    mapOperatorToShorthandDesignation(operator: import("./enums/operatorType.enum").OperatorType | import("./enums/operatorString.type").OperatorString): import("./enums/operatorString.type").OperatorString;
    mapOperatorByFieldType(fieldType: "string" | "number" | "boolean" | "object" | "unknown" | "integer" | "float" | "date" | "dateIso" | "dateUtc" | "dateTime" | "dateTimeIso" | "dateTimeIsoAmPm" | "dateTimeIsoAM_PM" | "dateTimeShortIso" | "dateEuro" | "dateEuroShort" | "dateTimeShortEuro" | "dateTimeEuro" | "dateTimeEuroAmPm" | "dateTimeEuroAM_PM" | "dateTimeEuroShort" | "dateTimeEuroShortAmPm" | "dateTimeEuroShortAM_PM" | "dateUs" | "dateUsShort" | "dateTimeShortUs" | "dateTimeUs" | "dateTimeUsAmPm" | "dateTimeUsAM_PM" | "dateTimeUsShort" | "dateTimeUsShortAmPm" | "dateTimeUsShortAM_PM" | "password" | "text" | "readonly"): import("./enums/operatorType.enum").OperatorType;
    objectWithoutKey<T_11 = any>(obj: T_11, omitKey: keyof T_11): T_11;
    parseUtcDate(inputDateString: any, useUtc?: boolean | undefined): string;
    thousandSeparatorFormatted(inputValue: string | number | null, separator?: "" | "." | "," | "_" | " "): string | null;
    findOrDefault<T_12 = any>(array: T_12[], logic: (item: T_12) => boolean, defaultVal?: {}): any;
    unsubscribeAll(subscriptions: (import("./services/rxjsFacade").Subscription | import("@slickgrid-universal/event-pub-sub").EventSubscription)[]): (import("./services/rxjsFacade").Subscription | import("@slickgrid-universal/event-pub-sub").EventSubscription)[];
    CancelledException: typeof ServiceUtilities.CancelledException;
    collectionObserver(inputArray: any[], callback: (outputArray: any[], newValues: any[]) => void): void;
    propertyObserver(obj: any, prop: string, callback: (newValue: any) => void): void;
    BackendUtilityService: typeof BackendUtilities.BackendUtilityService;
};
export { Utilities };
export { SlickgridConfig } from './slickgrid-config';
//# sourceMappingURL=index.d.ts.map